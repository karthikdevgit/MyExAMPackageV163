<apex:component controller="CommonViewerController">
        <script>
            var underscore = angular.module('underscore', []);
            underscore.factory('_', ['$window', function($window) {
                return $window._; // assumes underscore has already been loaded on the page
            }]);
            mainApp.directive('file', function(){
                return {
                    scope: {
                        file: '='
                    },
                    link: function(scope, el, attrs){
                        scope.$watch('file', function(newValue, oldValue) {
                            if(!newValue || !Object.keys(newValue).length) {
                                el.value = '';
                                if(el[0]) {
                                    el[0].value = '';
                                } 
                            }                                 
                        });
                               
                        el.bind('change', function(event){
                            var files = event.target.files;
                            var file = files[0];
                            var reader = new FileReader();
                            reader.onload = loaded;
                            reader.onerror = errorHandler;
                            if(file != null) { 
                                reader.readAsDataURL(file);
                            }
                            function loaded(evt){
                                if(!scope.file){
                                    scope.file = {};
                                }
                                var fileContent = String(evt.target.result);
                                fileContent = fileContent.substr(fileContent.indexOf(',') + 1);
                                
                                scope.file.resultbody = fileContent;
                                scope.file.name = file ? file.name : undefined;
                                scope.file.contenttype = file ? file.type : undefined;
                                scope.$apply(); 
                            }
                            function errorHandler(evt) {
                                if (evt.target.error.name == 'NotReadableError') {
                                    alert('File could not be read');
                                }
                                else {
                                    alert(evt.target.error);
                                }
                            }
                        });
                    }
                };
            });
            mainApp.directive('compileTemplate', function($compile, $parse){
                return {
                    link: function(scope, element, attr){
                        var parsed = $parse(attr.ngBindHtml);
                        function getStringValue() {
                            return (parsed(scope) || '').toString();
                        }
            
                        // Recompile if the template changes
                        scope.$watch(getStringValue, function() {
                            $compile(element, null, -9999)(scope);  // The -9999 makes it skip directives so that we do not recompile ourselves
                        });
                    }
                }
            });
            mainApp.directive("datepicker", function () {
                return {
                    restrict: "A",
                    require: "ngModel",
                    link: function (scope, element, attrs, ngModelCtrl) {
                        var updateModel = function (dateText) {
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(dateText);
                            });
                        };
                        var options = {
                            dateFormat: "dd/mm/yy",
                            onSelect: function (dateText) {
                                updateModel(dateText);
                            }
                        };
                        $(element).datepicker(options);
                    }
                }
            });
            mainApp.service('commonAppService', function($q,_,$timeout) {
                var reqdInputObj = new Object();
                var linkAMObj = new Object();
                var tobeInsertedAMObj = new Object();
                var sectionQuestionTemplatesObj = new Object();
                var selectedImage = new Object();
                var sectionQuestionTemplatesObj = {};
                var tobeInsertedAnswerResponseObj = {};
                var saveAnswerRecordObj = {};
                var deleteAttachSize = 0;
                var tempThis ={};
                
                this.queryQuestionTemplates = function(tempIdAndAMIdObj){
                    //call related apex controller to get question template records
                    var defer = $q.defer();
                    ExAM.CommonViewerController.returnSectionAndQuestionTemplate(tempIdAndAMIdObj, function(result, event) {
                        var obj = JSON.parse( _.unescape(result));
                        if(event.status){
                            defer.resolve(obj);
                        } else  {
                            defer.reject(obj);
                        }
                    });
                    return defer.promise;
                }
                this.fetchAllAnswerRecords = function() {

                    var defer = $q.defer();
                    var ansDetailsObj = {};
                    ExAM.DataManagementController.queryAllAnswerRecords('{!JSENCODE($CurrentPage.parameters.amid)}', true, function(result, event) {
        
                        if (event.status) {                        
                            var ans = JSON.parse( _.unescape(result) );
                            if (ans["errType"] && ans["errMsg"]) {
                                defer.reject( ans );
                            }
                            else {
                                defer.resolve(ans);
                            }
                        }
                    }, function(error) {
                        defer.reject(error);
                    });
                    return defer.promise;
                }
                this.queryReqdInputJS = function(currentManagerId, assesableFieldAPIName, assRecClsListJSON) {
    
                    var defer = $q.defer();
                    reqdInputObj.hasActionSuccess = false;
                    reqdInputObj.inputObj = new Object();
                    
                    ExAM.MultipleInspectionAssessmentViewCtrller.fetchRelatedAssignmentManagers(currentManagerId, assesableFieldAPIName, assRecClsListJSON, function(result, event) {
    
                        if(event.status) {
                            var obj = {};
                            if (typeof result === 'object') {
                                obj = result; //JSON.parse(_.unescape(result));
                                if( obj.exceptionMsg != undefined && obj.exceptionMsg != null && obj.exceptionMsg != '' ){
                                    reqdInputObj.hasActionSuccess = false;
                                    reqdInputObj.messageText = obj.exceptionMsg;
                                    reqdInputObj.showMessage = true;
                                } else {
                                    reqdInputObj.hasActionSuccess = true;
                                    reqdInputObj.inputObj = result;
                                }
                                var relatedManagers = JSON.parse( _.unescape( JSON.stringify(reqdInputObj) ) );
                                defer.resolve( relatedManagers );
                            } else {
    
                                defer.reject(reqdInputObj);
                            }
                        }else {
    
                            defer.reject(reqdInputObj);
                        }
                    });
                    return defer.promise;
                }
    
                
    
                /* Links Selected Assignment Manager With the Current ASM */
                this.linkSelectedManagerJS = function(currentASMIdStr, selectedManagerId, currentTabName) {
    
                    var defer = $q.defer();
                    var managerIdArr = [];
    
                    linkAMObj.messageText = '';
                    linkAMObj.searchManagerText = '';
                    linkAMObj.showASMTable = true;
                    linkAMObj.showMessage = false;
                    linkAMObj.hasActionSuccess = false;
                    
                    managerIdArr.push(currentASMIdStr); /* Record Id of current Assignment Manager */
                    managerIdArr.push(selectedManagerId); /* Record Id of selected Assignment Manager */
                    managerIdArr.push(currentTabName); /* Current Tab Name */
    
                    ExAM.MultipleInspectionAssessmentViewCtrller.linkSelectedASMWithCurrentAssignmentManager(JSON.stringify(managerIdArr), function(result, event) {
    
                        if (event.status) {
                            var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                            if (s.errMsg) {
                                $('.spinner, .slds-spinner--small').hide();
                                linkAMObj.showMessage = true;
                                linkAMObj.messageText = s.errMsg;
                                defer.reject(linkAMObj);
                            }
                            else {
                                linkAMObj.hasActionSuccess = true;
                                linkAMObj.searchManagerText = '';
                                linkAMObj.showASMTable = false;
                                defer.resolve(linkAMObj);
                            }
                        }else {
                            $('.spinner, .slds-spinner--small').hide();
                            linkAMObj.showMessage = true;
                            linkAMObj.messageText = 'Remote Call Failed';
                            defer.reject(linkAMObj);
                        }
                    });
                    return defer.promise;
                }
    
                /* Creates New Assignment Manager Under Selected Account */
                this.createNewASManagerJS = function(currentASMIdStr, selectedAcctId, templateId, currentTabName, assessableFieldName) {
    
                    var defer = $q.defer();
                    var reqdInputIdArr = [];
                    tobeInsertedAMObj.questionTemplateObj = new Object();
                    tobeInsertedAMObj.showASMSection = true;
                    tobeInsertedAMObj.showAccountSection = true;
                    tobeInsertedAMObj.showSectionQuestions = false;
                    tobeInsertedAMObj.showMessage = false;
                    tobeInsertedAMObj.hasActionSuccess = false;
                    tobeInsertedAMObj.messageText = '';
                    tobeInsertedAMObj.assessmentTemplateId = '';
                    tobeInsertedAMObj.newASMId = '';
                    tobeInsertedAMObj.newASMName = '';
    
                    reqdInputIdArr.push(currentASMIdStr); /* Record Id of current Assignment Manager */
                    reqdInputIdArr.push(selectedAcctId); /* Record Id of selected Account */
                    reqdInputIdArr.push(templateId); /* Record Id of Assessment Template Based on Active Tab */
                    reqdInputIdArr.push(currentTabName); /* Current Tab Name */
                    reqdInputIdArr.push(assessableFieldName);/* assessable fileld api name */ 
                    ExAM.MultipleInspectionAssessmentViewCtrller.createNewAssignmentManager(JSON.stringify(reqdInputIdArr), function(result, event) {
                        if ( event.status ) {
                        
                            var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                            if ( angular.isDefined(s.errMsg) ) {
                                tobeInsertedAMObj.hasActionSuccess = false;
                                tobeInsertedAMObj.showMessage = true;
                                tobeInsertedAMObj.messageText = s["error"].errMsg;
                                defer.reject(tobeInsertedAMObj);
                            } else if ( s.code == 'success' ){
                                var asmObj = JSON.parse(s["msg"]);
                                tobeInsertedAMObj.hasActionSuccess = true;
                                tobeInsertedAMObj.assessmentTemplateId = asmObj.ExAM__InvestigationType__c;
                                tobeInsertedAMObj.newASMId = asmObj.Id;
                                tobeInsertedAMObj.newASMName = asmObj.Name;
                                tobeInsertedAMObj.showASMSection = false;
                                tobeInsertedAMObj.showAccountSection = false;
                                tobeInsertedAMObj.showSectionQuestions = true;
                                defer.resolve(tobeInsertedAMObj);
                            }
                        } else {
                            tobeInsertedAMObj.showMessage = true;
                            tobeInsertedAMObj.messageText = 'Remote Call Failed';
                            defer.reject(tobeInsertedAMObj);
                            
                        }
                    });
                    return defer.promise;
                }
    
                /** Decision Tree Functionality Starts **/
                
                /** Image Question Type Answer Option Finding Service Starts **/
            
                this.fetchAllManagerRecords = function() {
    
                    var defer = $q.defer();
                    ExAM.AssignmentManagerListController.queryAllASMRecords(function(result, event) {
        
                        if (event.status) {
                            var fResult = JSON.parse(_.unescape(result));
                            defer.resolve(fResult);
                        }
                    }, function(error) {
                        defer.reject(error);
                    });
                    return defer.promise;
                }
                this.doReqdFieldValidation = function(response,isSelectBtn,selectImage, isSubmit,signImage,fileAttach, responseFile) {

                    var defer = $q.defer();
                    var selectedAnsOption = '';
                    var formattedPhoneNumberObj = {};
                    var errorFlag = true;
                    var resObj = {};
                    resObj.showMessage = false;
                    resObj.messageText = '';
                    resObj.hasActionSuccess = true;
                    if (isSubmit) {
                        $('.validateEmail:visible').each(function() {
    
                            var validateResult;
                            var email = $(this).val(); 
                            var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    
                            if(email.length > 0) {
                                validateResult =  regx.test(email);
                                if(validateResult == false ) {
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.validateEmailMessage').css('display','');
                                    errorFlag = false;
                                } else {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.validateEmailMessage').css('display','none');
                                }
                            }
                        });
                        $('.validatePhone:visible').each(function() {
                            
                            var validateResult;
                            var PhNum;
                            var phoneVal = $(this).val(); 
                            var phoneId = $(this).attr('id'); 
                            var phoneRegx = /^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$/;
                               
                            if(phoneVal.length > 0) { 
                               
                                validateResult =  phoneRegx.test(phoneVal);
                                PhNum  = phoneVal.replace(/[()-\s+]/g,'');
                                formattedPhoneNumberObj[phoneId] = PhNum;
                                if(validateResult == false){
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.validatePhNumMessage').css('display','');
                                    errorFlag = false;
                                } else {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.validatePhNumMessage').css('display','none');
                                }
                            }
                            
                        });
                        
                        $('.validateCurrency:visible').each(function() {
                            
                           var validateResult;
                           var CurNum;
                           var CurVal = $(this).val(); 
                           var CurId = $(this).attr('id'); 
                           var numbers = /^[0-9]+$/;
                           var decimal=  /^[-+]?[0-9]+\.[0-9]+$/;
                                
                           if(CurVal.length > 0) { 
                               
                               CurNum = CurVal.replace('$','');
                               
                               if( CurNum.match(numbers) || CurNum.match(decimal) ) { 
                                   validateResult = true; 
                                   formattedPhoneNumberObj[CurId] = CurNum;
                               }
                               else { 
                                   validateResult = false; 
                               }
                                   
                               if(validateResult == false){
                                   
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.validateCurNumMessage').css('display','');
                                    errorFlag = false;
                                        
                               } else {
                                   
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.validateCurNumMessage').css('display','none');
                                    
                               }
                           }
                        });
                        if(errorFlag) {
                            defer.resolve(formattedPhoneNumberObj);
                        } else {
                            resObj.showMessage = true;
                            resObj.messageText = 'Please correct all the errors shown in red color.';
                            resObj.hasActionSuccess = false;
                            defer.reject(resObj);
                        }
                    }
                    else {
                        $('.validateFiletrue:visible').each(function() {        
                                
                            var id = $(this).attr('id'); 
                            id = id.replace('file','');
                            if( angular.isDefined(fileAttach[id]) && (angular.isDefined(fileAttach[id][0].id) || angular.isDefined(fileAttach[id][0].resultbody))) {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            } else if(angular.isDefined(responseFile[id]) && (angular.isDefined(responseFile[id][0].id) || angular.isDefined(responseFile[id][0].resultbody))) {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            } else {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                errorFlag = false;
                            }   
                        });  
                        $('.validatetrue:visible').each(function() {
    
                            if ($(this).prop('nodeName') != 'DIV') {
                                selectedAnsOption = ($(this).val().trim() != '?') ? $(this).val().trim() : '';
                            }else {
                                $(this).children().children().each(function() {
    
                                    if($(this).hasClass( "ng-touched" )) {
                                        selectedAnsOption = $(this).val();
                                    }
                                });
                            }
                            if(selectedAnsOption.length > 0) {
                    
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            } else {
    
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasReqdFieldValidationSuccess = false;
                                errorFlag = false;   
                            }
                        });
                        $('.validateradiotrue:visible').each(function() {
                            $(this).parent('div').addClass('currentRadio');
                            if($('.currentRadio input[type=radio]:checked').length == 0) {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').parent().find('.requiredMessage').css('display','');
                                //hasReqdFieldValidationSuccess = false;
                                errorFlag = false;   
                            } else {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').parent().find('.requiredMessage').css('display','none');
                            }
                            $(this).parent('div').removeClass('currentRadio');
                        });
                        $('.validatepicklisttrue:visible').each(function() {
    
                            if($(this).val() == null || $(this).val() == '' || $(this).val() == '?') {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').parent().find('.requiredMessage').css('display','');
                                errorFlag = false;
                            } else {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').parent().find('.requiredMessage').css('display','none');
                            }
                        });
                        $('.validatecheckboxtrue:visible').each(function() {
                            $(this).parent().parent('div').addClass('currentcheckbox');
                            if($('.currentcheckbox input[type=checkbox]:checked').length == 0) {
                                $(this).parent().parent('div').addClass('slds-has-error');
                                $(this).parent().parent('div').parent().find('.requiredMessage').css('display','');
                                //hasReqdFieldValidationSuccess = false;
                                errorFlag = false;   
                            } else {
                                $(this).parent().parent('div').removeClass('slds-has-error');
                                $(this).parent().parent('div').parent().find('.requiredMessage').css('display','none');
                            }
                            $(this).parent().parent('div').removeClass('currentcheckbox');
                        });
                        $('.validateEmail:visible').each(function() {
    
                            var validateResult;
                            var email = $(this).val(); 
                            var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    
                            if(email.length > 0) {
                                   
                                validateResult =  regx.test(email);
    
                                if(validateResult == false ) {
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.validateEmailMessage').css('display','block');
                                    //hasEmailFieldValidationSuccess = false;
                                    errorFlag = false;   
                                } else {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.validateEmailMessage').css('display','none');
                                }
                            }
                        });
                        $('.validatePhone:visible').each(function() {
                            
                            var validateResult;
                            var PhNum;
                            var phoneVal = $(this).val(); 
                            var phoneId = $(this).attr('id'); 
                            var phoneRegx = /^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$/;
                               
                            if(phoneVal.length > 0) { 
                               
                                validateResult =  phoneRegx.test(phoneVal);
                                PhNum  = phoneVal.replace(/[()-\s+]/g,'');
                                formattedPhoneNumberObj[phoneId] = PhNum;
    
                                if(validateResult == false){
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent().parent('div').find('.validatePhNumMessage').css('display','block');
                                    //hasPhoneFieldValidationSuccess = false;
                                    errorFlag = false; 
                                } else {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent().parent('div').find('.validatePhNumMessage').css('display','none');
                                }
                            }
                        });
                        $('.validateCurrency:visible').each(function() {
                            
                           var validateResult = false;
                           var CurNum;
                           var CurVal = $(this).val(); 
                           var CurId = $(this).attr('id'); 
                           var numbers = /^[0-9]+$/;
                           var decimal=  /^[-+]?[0-9]+\.[0-9]+$/;
                           if(CurVal.length > 0) { 
                               CurNum = CurVal.replace('$','');
                               if( CurNum.match(numbers) || CurNum.match(decimal) ) { 
                                   validateResult = true; 
                                   formattedPhoneNumberObj[CurId] = CurNum;
                               } else { 
                                   validateResult = false; 
                               }  
                               if(validateResult == false){
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.validateCurNumMessage').css('display','');
                                    errorFlag = false;  
                               } else {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.validateCurNumMessage').css('display','none');
                               }
                           }
                        });
                        $('.imageValidatetrue:visible').each(function() {
                        
                            var Id = $(this).attr('id'); 
                            if(!angular.isUndefined(selectImage)) {
                                if(selectImage[Id]) {
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.requiredMessage').css('display','none');
                                } else {
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.requiredMessage').css('display','');
                                    //hasImageFieldValidationSuccess = false;
                                    errorFlag = false; 
                                }
                            } else {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasImageFieldValidationSuccess = false;
                                errorFlag = false; 
                            }
                        });
                        $('.validateBtntrue:visible').each(function() {
                        
                            var Id = $(this).attr('id'); 
                            Id = Id.replace('Btn','');
                            if(isSelectBtn[Id]) {errorFlag
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            
                            } else {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasBtnFieldValidationSuccess = false;
                                errorFlag = false; 
                            }
                        });
                        //added on 20-09-2016
                        $('.validateSignImagetrue:visible').each(function() {
                            var Id = $(this).find('.validateSign').attr('id'); 
                            Id = Id.replace('sign','');
                            
                            if (!angular.isUndefined(signImage)) {
                                if(!angular.isUndefined(signImage[Id]))  {
                                    $(this).removeClass('slds-has-error');
                                    $(this).parent('div').find('.requiredMessage').css('display','none');        
                                } else {
                                    $(this).addClass('slds-has-error');
                                    $(this).parent('div').find('.requiredMessage').css('display','');
                                    //hasSignImageValidationSuccess = false;
                                    errorFlag = false; 
                                }
                            } else {
                                $(this).addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasSignImageValidationSuccess = false;
                                errorFlag = false; 
                            }
                        });
                        //hotspot image
                        $('.hotspotImagetrue:visible').each(function() {
                            var hotspotQId = $(this).attr('id'); 
                            hotspotQId = hotspotQId.replace('hotspot','');
                           
                            if (!angular.isUndefined(response[hotspotQId])) {
                                $(this).removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');        
                            } else {
                                $(this).addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hashotspotImageValidationSuccess = false;
                                errorFlag = false; 
                            }
                        });
                        //List Question Type
                        $('.ListQTypetrue:visible').each(function() {
                            var listQTypeQId = $(this).attr('id'); 
                            listQTypeQId = listQTypeQId.replace('ListQType','');
                            
                            if (!angular.isUndefined(response[listQTypeQId])) {
                                $(this).removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');        
                            } else {
                                $(this).addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasListQTypeValidationSuccess = false;
                                errorFlag = false; 
                            }
                        });
                        //Case question type code 06-07-2016
                        $('.caseValidatetrue:visible').each(function() {
                        
                           var validateResult;
                           var caseVal = $(this).val(); 
                           
                           if (caseVal.length > 0) {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','none');
                            } else {            
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.requiredMessage').css('display','');
                                //hasCaseValidateSuccess = false;
                                errorFlag = false; 
                            }
                           
                        });
                        $('.caseEmailValidatetrue:visible').each(function() {
                        
                           var validateResult;
                           var email = $(this).val(); 
                           var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                           
                           if(email.length > 0) {
                               
                               validateResult =  regx.test(email);
    
                               if(validateResult == false ){
                               
                                    $(this).parent('div').addClass('slds-has-error');
                                    $(this).parent('div').find('.requiredEmailMessage').css('display','');
                                    //hasCaseEmailValidationSuccess = false;
                                    errorFlag = false; 
                               } else {
                                    
                                    $(this).parent('div').removeClass('slds-has-error');
                                    $(this).parent('div').find('.requiredEmailMessage').css('display','none');
                                    
                              }
                          }
                        });
                        if(errorFlag) {
                            defer.resolve(formattedPhoneNumberObj);
                        } else {
                            resObj.showMessage = true;
                            resObj.messageText = 'Please correct all the errors shown in red color.';
                            resObj.hasActionSuccess = false;
                            defer.reject(resObj);
                        }
                    }
                    return defer.promise;
                }
                this.splitAvailableAnswerOptions = function(quesTempRec) {
            
                    var options = [];
                    if(quesTempRec.hasOwnProperty('ExAM__Answer_Options__r') && angular.isDefined(quesTempRec['ExAM__Answer_Options__r'])) {
                        var ansOptionRec = quesTempRec.ExAM__Answer_Options__r.records.length;
                        for(var ansOpt = 0; ansOpt < ansOptionRec; ansOpt++) {
                           options[ansOpt] = quesTempRec.ExAM__Answer_Options__r.records[ansOpt].Name;
                        }
                    } else if( quesTempRec.hasOwnProperty('ExAM__Subquestion_Label__c') && angular.isDefined(quesTempRec['ExAM__Subquestion_Label__c'])) {
                        options = quesTempRec.ExAM__Subquestion_Label__c.split('~');
                    } 
                    if(options.length > 0) {
                        return this.trimFunc(options);
                    } else {
                        return options;
                    }
                }
                this.trimFunc = function(arr) {
                    if((arr != null || arr != undefined) && arr.length > 0 ) {
                        for(var a = 0; a < arr.length; a++) {
                            arr[a] = arr[a].trim();
                        }
                    }
                    return arr;
                }
                this.saveUsrEnteredAnswers = function(qIdAndAnsIdObj,response, caseRes, comment, assessmentTemplateId, newASMId, isSubmit, sectionAndQuestionTemplateObj, decisionTreeQuesIdwithAnsId,contextQuesAndAnsField,dTLaunchedQues, assessableObjId, assessableObjAPI, viewerName, ipAddress, publicAssessmentId, startTimeStr, isSingleQuesMode, secId, autoSubmit, saveFile, quesIdWithQuestionTemplate) {
                    var defer = $q.defer();
                    var errorFlag = false;
                    tobeInsertedAnswerResponseObj.showMessage = false;
                    tobeInsertedAnswerResponseObj.showASMSection = false;
                    tobeInsertedAnswerResponseObj.showAccountSection = false;
                    tobeInsertedAnswerResponseObj.showSectionQuestions = true;
                    tobeInsertedAnswerResponseObj.hasActionSuccess = false;
                    tobeInsertedAnswerResponseObj.messageText = '';
                    tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = {};
        
                    /* Below code prepares answers array */
                    
                    var answerList = [];
                    var ansFieldAndVal = {};
                    var splitOfEachContext = [];

                    if( response != null ) {
                        angular.forEach(response,function(value,key){
                            if((value == '' && value.length == 0)
                               && quesIdWithQuestionTemplate[key].ExAM__Question_Type__c != 'Signature'
                               && quesIdWithQuestionTemplate[key].ExAM__Question_Type__c != 'File Question - Answer') {

                                delete response[key];
                            } else if(typeof value == 'object') {
                                var answer = '';
                                for (var option in value){
                                    if (value[option]) {
                                        if (answer.length > 0) {
                                            answer += '~'+option;
                                        } else {
                                            answer = option;
                                        }
                                    }
                                }
                                if(answer == '') {
                                    delete response[key];
                                }
                            }
                        });
                    }
                    
                    if(contextQuesAndAnsField != null && contextQuesAndAnsField != '' && contextQuesAndAnsField != undefined) {
                        if(contextQuesAndAnsField.indexOf(':') > 0) {
                            splitOfEachContext = contextQuesAndAnsField.split(':');
                        } else {
                            splitOfEachContext.push(contextQuesAndAnsField);
                        }
                    }
                    
                    if(splitOfEachContext.length > 0 ) {
                        for(var i=0; i< splitOfEachContext.length; i++) {
                            var tempArr = [];
                            tempArr = splitOfEachContext[i].split("~");
                            
                            angular.forEach(response, function(value, key) {
                                if(key == tempArr[0] && value != undefined && value != null && value != '') {
                                   if(angular.isObject(value)) {
                                        var multicheckValue = ""
                                        for(var option in value){
                                            if(value[option] && option != "$$hashKey") {
                                                if (multicheckValue == "") {
                                                    multicheckValue += option;
                                                } else {
                                                    multicheckValue += '~'+option; 
                                                }
                                            }
                                        } 
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = multicheckValue; 
                                    } else {
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = value;
                                    }
                                }
                                
                            });
                            if(viewerName == 'lens') {
                                angular.forEach(dTLaunchedQues, function(res, qId) {
                                    if(qId == tempArr[0] && res != undefined && res != null && res != '') {
                                    
                                        if(res.indexOf('~~') > 0)  {
                                            ansFieldAndVal[tempArr[1].toLowerCase()] = res.split('~~')[1];
                                        } else {
                                            ansFieldAndVal[tempArr[1].toLowerCase()] = res;
                                        }
                                    }
                                    
                                });
                            }
                        }
                    }
                    angular.forEach(response, function(value, key) { 
                        var answerObj = new Object();
                        var answerRec = new Object();
                        var questionTemp = {
                            Id:key
                        };
                        answerObj.questionTemp = questionTemp;
                        if (comment.hasOwnProperty(key)) {
                            answerRec.ExAM__Comment__c = comment[key];
                        }
                        if (typeof value == 'object') {
                            var answer = '';
                            for (var option in value){
                                if (value[option]) {
                                    if (answer.length > 0) {
                                        answer += '~'+option;
                                    } else {
                                        answer = option;
                                    }
                                }
                            }
                            if( answer != '' ){
                                answerRec.ExAM__Response__c = answer;
                            }
                        } else {
                            answerRec.ExAM__Response__c = (typeof value === "boolean") ? value.toString() : value;
                        }
                        answerRec.ExAM__Issue_Request__c = newASMId;
                        angular.forEach(ansFieldAndVal, function(value1, key1) {
                            answerRec[ key1 ] = value1;
                        });
                        answerObj.quesResponse = answerRec;
                        this.push(answerObj);
                    },answerList);
                    if ( answerList.length > 0 || (isSubmit) || autoSubmit || saveFile) {
                        /* Below code calls controller method to insert all answer records */
    
                        var attList = [];
                        
                        saveAnswerRecordObj['amId'] = newASMId;
                        saveAnswerRecordObj['quesIdANDAnsIdMap'] = qIdAndAnsIdObj;
                        saveAnswerRecordObj['answerList'] = answerList;
                        saveAnswerRecordObj['tempId'] = assessmentTemplateId;
                        saveAnswerRecordObj['assessibleObjId'] = assessableObjId;
                        saveAnswerRecordObj['assessibleObjName'] = assessableObjAPI;
                        saveAnswerRecordObj['decisionTreeQuesIdAnsId'] = decisionTreeQuesIdwithAnsId;
                        saveAnswerRecordObj['caseRec'] = caseRes;
                        saveAnswerRecordObj['isSubmit'] = isSubmit;
                        saveAnswerRecordObj['viewerName'] = viewerName;
                        saveAnswerRecordObj['isSingleQuestionMode'] = isSingleQuesMode;
                        saveAnswerRecordObj['secId'] = secId;
                        if( viewerName == 'public' ) {
                            saveAnswerRecordObj['ipAddress'] = viewerName;
                            saveAnswerRecordObj['publicAssessmentId'] = publicAssessmentId;
                            saveAnswerRecordObj['startTimeStr'] = startTimeStr;
                        }
                        ExAM.CommonViewerController.saveAnswerRecord(saveAnswerRecordObj, function(result, event) {
                            if (event.status) {
                                if (result != null && result != '') {

                                    var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                                    if (s.successMsg) {
                                        tobeInsertedAnswerResponseObj.hasActionSuccess = true;
                                        tobeInsertedAnswerResponseObj.showMessage = true;
                                        tobeInsertedAnswerResponseObj.messageText = s.successMsg;
                                        tobeInsertedAnswerResponseObj.quesIdwithAnsIdMap = s.quesIdwithAnsIdMap;
                                        tobeInsertedAnswerResponseObj.amId = s.amId;
                                        tobeInsertedAnswerResponseObj.assessableObjectId = s.assessableObjectId;
                                        tobeInsertedAnswerResponseObj.returnURL = s.returnURL;
                                        //Added for Answered icon
                                        if( viewerName == 'lens' ) {
                                            for(i =0;i < sectionAndQuestionTemplateObj.length;i++) {
                                                for(j =0;j < sectionAndQuestionTemplateObj[i].questionTemplateRecords.length;j++) {
                                                    if(angular.isDefined(s.quesIdwithAnsIdMap) && s.quesIdwithAnsIdMap != null && s.quesIdwithAnsIdMap[sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].Id]) {
                                                        sectionAndQuestionTemplateObj[i].questionTemplateRecords[j]['isAnswered'] = true;
                                                    }
                                                }
                                            }
                                            tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                        }
                                        defer.resolve(tobeInsertedAnswerResponseObj);
                                    } else {
                                        if(s.errMsg) {
                                            tobeInsertedAnswerResponseObj.showMessage = true;
                                            tobeInsertedAnswerResponseObj.messageText = s.errMsg;
                                            tobeInsertedAnswerResponseObj.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                            defer.reject(tobeInsertedAnswerResponseObj);
                                        }
                                    }
                                }    
                            } else {
                                tobeInsertedAnswerResponseObj.showMessage = true;
                                tobeInsertedAnswerResponseObj.messageText = event.message;
                                defer.reject(tobeInsertedAnswerResponseObj);
                            }
                        });
    
                    } else {
                        tobeInsertedAnswerResponseObj.hasActionSuccess = false;
                        tobeInsertedAnswerResponseObj.showMessage = true;
                        tobeInsertedAnswerResponseObj.messageText = 'Please enter answer for any of the available questions and then save the record';
                        defer.reject(tobeInsertedAnswerResponseObj);
                    }
                    return defer.promise;
                } 
                
                //Modified this method on 14-06-2016 to prepare attachmentList inside of it for save
                this.callAttachmentUploadMethod = function(resultobject, alreadyAnsObj, photo, fileAttach, signImage, decisionTreePhotos, deleteAttFile,responseFile,dtAMandAssObjResponseFile) {
    
                    var defer = $q.defer();
                    var attachmentList = [];
                    var attachmentQuestionId;
                    var alreadyAnswered = [];
                    var fileReInitObj = {};
                    var quesIdwithAnsIdMap = resultobject.quesIdwithAnsIdMap;
                    var amId = resultobject.amId;
                    var assObjId = resultobject.assessableObjectId;
                    
                    if(deleteAttFile.length > 0) {
                        for(var i=0;i < deleteAttFile.length;i++) {  
                            var attach = {};
                            attach.attId = deleteAttFile[i];
                            attachmentList.push( attach );
                            deleteAttachSize++;
                        };                                 
                    }   
                    $.each(decisionTreePhotos, function(key, value) {
                        if ([key]) {
                            var pId;
                            if (typeof quesIdwithAnsIdMap[key] == 'object') {
                                if (quesIdwithAnsIdMap[key]["Id"]) {
                                   pId = quesIdwithAnsIdMap[key]["Id"];
                                }
                            }
                            else {
                                pId = quesIdwithAnsIdMap[key];
                            }
                            var photoArr = value;
                            angular.forEach(photoArr, function(value1, key) {   
                                
                                if(typeof value1.resultbody !== 'undefined') {
                                    var attach = {};
                                    if(alreadyAnsObj != null && angular.isDefined(alreadyAnsObj[key])) {
                                        if(typeof value1.serialNum !== 'undefined') {
                                            alreadyAnswered.push(alreadyAnsObj[key][value1.serialNum]);
                                        }
                                    }
                                    attach.fileNameStr = value1.name;
                                    attach.cType = value1.contenttype;
                                    attach.imgContent = value1.resultbody;
                                    attach.parentIdStr = pId;
                                    attach.isPrivate = false;
                                    attachmentList.push( attach );
                                }
                            });                                 
                        }
                    });
                    
                    $.each(photo, function(key, value) {
    
                        if (quesIdwithAnsIdMap[key]) {
    
                            var answeridList = [];
                            attachmentQuestionId = key;
    
                            if (typeof quesIdwithAnsIdMap[key] == 'object') {
    
                                if (quesIdwithAnsIdMap[key]["Id"]) {
                                    answeridList.push( quesIdwithAnsIdMap[key]["Id"] );
                                }
                                else {
                                    answeridList.push( quesIdwithAnsIdMap[key][0] );
                                }
                            }
                            else {
                                answeridList.push(quesIdwithAnsIdMap[key]);
                            }
                            for (j = 0; j < answeridList.length; j++) {        
                                var attach = {};
                                attach.fileNameStr = value.name;
                                attach.cType = value.contenttype;
                                attach.imgContent = value.resultbody;
                                attach.parentIdStr = answeridList[j];
                                attach.isPrivate = false;
                                attachmentList.push( attach );
                            }                                        
                        }
                    });
                    angular.forEach(responseFile, function(value, key) {
                        if(angular.isDefined(responseFile[key][0].resultbody) && angular.isUndefined(responseFile[key][0].id)) {
                            var attach = {};
                            if(alreadyAnsObj != null && angular.isDefined(alreadyAnsObj[key])) {
                                if(typeof value.serialNum !== 'undefined'){
                                    alreadyAnswered.push(alreadyAnsObj[key][value.serialNum]);
                                }
                            }
                            attach.fileNameStr = 'Qt('+responseFile[key][0].quesName+') '+responseFile[key][0].name;
                            attach.cType = responseFile[key][0].contenttype;
                            attach.imgContent = responseFile[key][0].resultbody;
                            if( responseFile[key][0].quesType == 'File Question - AM' ){
                                attach.parentIdStr = amId;
                            } else if( responseFile[key][0].quesType == 'File Question - Assessable Object' ){
                                attach.parentIdStr = assObjId;
                            }
                            attach.isPrivate = false;
                            attachmentList.push( attach );
                            responseFile[key] =[];
                            responseFile[key].push({name:'No file chosen'});
                        }
                       
                    });
                    
                    angular.forEach(fileAttach, function(value, key) {
                        var fileArr = value;
                        
                        if ( quesIdwithAnsIdMap != null && angular.isDefined(quesIdwithAnsIdMap[key])) {
                        
                            var pId = quesIdwithAnsIdMap[key];
                            angular.forEach(fileArr, function(value1, key1) {    
                                if(typeof value1.resultbody !== 'undefined' && angular.isUndefined(value1.id)) {
                                    var attach = {};
                                    if(alreadyAnsObj != null && angular.isDefined(alreadyAnsObj[key])) {
                                        if(typeof value1.serialNum !== 'undefined'){
                                            alreadyAnswered.push(alreadyAnsObj[key][value1.serialNum]);
                                        }
                                    }
                                    attach.fileNameStr = value1.name;
                                    attach.cType = value1.contenttype;
                                    attach.imgContent = value1.resultbody;
                                    attach.parentIdStr = pId;
                                    attach.isPrivate = false;
                                    attachmentList.push( attach );
                                }
                            }); 
                            fileAttach[key] =[];
                            fileAttach[key].push({name:'No file chosen'});
                        }
                    });
                    
                    $.each(signImage, function(key, value) {
                       
                        if (quesIdwithAnsIdMap != null && quesIdwithAnsIdMap[key]) {
                            if(alreadyAnsObj != null && angular.isDefined(alreadyAnsObj[key])) {
                                alreadyAnswered.push(alreadyAnsObj[key][0]); 
                            }
                            var answeridList = [];
                            attachmentQuestionId = key;
    
                            if (typeof quesIdwithAnsIdMap[key] == 'object') {
    
                                if (quesIdwithAnsIdMap[key]["Id"]) {
                                    answeridList.push( quesIdwithAnsIdMap[key]["Id"] );
                                }
                                else {
                                    answeridList.push( quesIdwithAnsIdMap[key][0] );
                                }
                            }
                            else {
                                answeridList.push(quesIdwithAnsIdMap[key]);
                            }
                            for (j = 0; j < answeridList.length; j++) {        
                                var attach = {};
                                attach.fileNameStr = 'Signature';
                                attach.imgContent = signImage[key].replace("data:image/png;base64,","");
                                attach.parentIdStr = answeridList[j];
                                attach.cType = 'image/png';
                                attach.isPrivate = false;
                                attachmentList.push( attach );
                            }   
                        }
                    });
                    
                    angular.forEach(dtAMandAssObjResponseFile, function(value, key) {
                        var attach = {};
    
                        if((angular.isDefined(dtAMandAssObjResponseFile[key][0].tag) && dtAMandAssObjResponseFile[key][0].tag) && angular.isDefined(dtAMandAssObjResponseFile[key][0].resultbody) ){
                            if( dtAMandAssObjResponseFile[key][0].quesType == 'File Question - AM' ){
                                attach.parentIdStr = amId;
                            } else if( dtAMandAssObjResponseFile[key][0].quesType == 'File Question - Assessable Object' ) {
                                attach.parentIdStr    = assObjId;
                            }
                            attach.fileNameStr = 'Qt('+dtAMandAssObjResponseFile[key][0].quesName+') '+dtAMandAssObjResponseFile[key][0].name;
                            attach.cType = dtAMandAssObjResponseFile[key][0].contenttype;
                            attach.imgContent = dtAMandAssObjResponseFile[key][0].resultbody;
                            attach.isPrivate = false;
                            attachmentList.push( attach );
                        }
                    });
                    fileReInitObj.fileAttach = fileAttach;
                    fileReInitObj.responseFile = responseFile;
                    if (attachmentList.length > 0) {
                        $('.spinner, .slds-spinner--small').show();
                        saveAttachmentJS(attachmentList,alreadyAnswered,0,defer,fileReInitObj).then(function(data) { }); 
                    }
                    else {
                        defer.resolve(fileReInitObj);
                    }
                    return defer.promise;
                }
                
                // Start upload attachments recursive function
                function saveAttachmentJS(attachmentList,alreadyAnswered,i,defer,fileReInitObj){
                    var attachLength = attachmentList.length;
                    var attchmentArr = [];
                    attchmentArr.push(attachmentList[i]);
                    j=i+1;
                    $('.attachNumber').css('display','block');
                    $('.attachNumber').text('Processed '+j+' of '+attachLength);
                    var saveAttachmentObj = {
                        attachDetailList:attchmentArr,
                        answeredAttIdList:alreadyAnswered
                    };
                    ExAM.CommonViewerController.saveAttachment(saveAttachmentObj, function(result, event) {
                        if (event.status) {
                            i = i+1;
                            attchmentArr = saveAttachmentObj.attachDetailList;
                            
                            if(angular.isDefined(attchmentArr[0].fileNameStr)){
                                $('.attachMessage').text('"'+attchmentArr[0].fileNameStr+'" was uploaded');
                            } else {
                                $('.attachMessage').text('"'+attchmentArr[0].attId+'" was deleted');
                            }
                            $('.attachMessage').css('display','block');                    
                            if(attachLength>i){
                                saveAttachmentJS(attachmentList,alreadyAnswered,i,defer,fileReInitObj);
                            } else {
                                setTimeout(function(){ defer.resolve(fileReInitObj);
                                    $('.attachNumber').css('display','none');
                                    $('.attachMessage').css('display','none');
                                }, 100);
                            }
                        }
                    },
                    function(error) {
                        defer.reject('error');
                    });
                    return defer.promise;
                }
                // End upload attachments recursive function
                
                this.opencommentBox = function(selQuestionId) {
                    
                    $('.answercomment').removeClass('slds-modal__close');
                    $('.answercomment').addClass('slds-fade-in-open');
                }
                this.closecommentBox = function() {
                    $('.answercomment').addClass('slds-modal__close');
                    $('.answercomment').removeClass('slds-fade-in-open');
                }
                this.savecommentBox = function() {    
                    $('.answercomment').addClass('slds-modal__close');
                    $('.answercomment').removeClass('slds-fade-in-open');
                }
                
                /* Attachment Div Toggle Code */
                this.openPhotoUploadBox = function() {
                    $('.photoUpload').removeClass('slds-modal__close');
                    $('.photoUpload').addClass('slds-fade-in-open');
                }
                this.closePhotoUploadBox = function() {
                    $('.photoUpload').addClass('slds-modal__close');
                    $('.photoUpload').removeClass('slds-fade-in-open');
                }
                this.savePhotoBox = function() {    
                    $('.photoUpload').addClass('slds-modal__close');
                    $('.photoUpload').removeClass('slds-fade-in-open');
                }
                <!--added on 20-09-2016-->
                this.openSignModal = function() {
                    $('.sign').removeClass('slds-modal__close');
                    $('.sign').addClass('slds-fade-in-open');   
                }
                this.closeSignModal = function() {
                    $('.sign').addClass('slds-modal__close');
                    $('.sign').removeClass('slds-fade-in-open');   
                }
                this.decisionTreeOpenWindow = function(answer, questionTemplate, questionNamewithQuestionTemplate, resultQuestionNamewithQuestionTemplate) {

                    var decisionTreeQuestion = {};
                    if( angular.isDefined(questionTemplate.ExAM__Single_Next_Question__c) && angular.isDefined(questionTemplate.ExAM__Single_Next_Question__r) ) {
                        if( angular.isDefined( questionNamewithQuestionTemplate[questionTemplate.ExAM__Single_Next_Question__r.Name ] )) {
                            decisionTreeQuestion = questionNamewithQuestionTemplate[questionTemplate.ExAM__Single_Next_Question__r.Name];
                        }
                    } else {
                        if ( angular.isDefined(questionTemplate.ExAM__Next_Question__c) || 
                             angular.isDefined(questionTemplate.ExAM__Answer_Options__r)) {
                             
                            var questionPosition = -1;
                            var answerOptions = [];
                            var nextquestionList = [];
                            
                            answerOptions = this.splitAvailableAnswerOptions(questionTemplate);
                            
                            if(answerOptions.length > 0) {
                                for (var i=0; i < answerOptions.length; i++) {
                                    if (answer == answerOptions[i]) {
                                        questionPosition = i;
                                        break;
                                    }
                                }
                            }
                            if ( angular.isUndefined(questionTemplate.ExAM__Answer_Options__r) ){
                                nextquestionList = this.trimFunc(questionTemplate.ExAM__Next_Question__c.split('~'));    
                            } else {
                                if ( angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records) ){
                                    var nextQuesLen = questionTemplate.ExAM__Answer_Options__r.records.length;
                                    for( var i = 0; i < nextQuesLen; i++ ){
                                        if( angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r) &&
                                            angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name) ){
                                            nextquestionList[i] = questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name;
                                        } else {
                                            nextquestionList[i] = 'Nil';
                                        }
                                    }
                                    nextquestionList = this.trimFunc(nextquestionList);
                                }
                            }
                            //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                            if( nextquestionList.length > questionPosition && 
                                angular.isDefined( nextquestionList[questionPosition] ) && 
                                angular.isDefined(questionNamewithQuestionTemplate[nextquestionList[questionPosition]]) ){
                                decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[questionPosition]];                                
                            } else if( ( nextquestionList.length == 1 || 
                                ( nextquestionList.length > 0 && ( questionTemplate.ExAM__Question_Type__c == 'Result' || questionTemplate.ExAM__Question_Type__c == 'MultiselectPicklist' ) ) ) && 
                                angular.isDefined( nextquestionList[0] ) &&
                                angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[0]] ) ) {
                                decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[0]];
                            } else {
                                decisionTreeQuestion = {};
                            }
                        }
                    }
                    if ( Object.keys(decisionTreeQuestion).length > 0 ){  
                        $('.DecisionTree').removeClass('slds-modal__close');
                        $('.DecisionTree').addClass('slds-fade-in-open');
                        $('.DecisionTreeQtnLabelDiv').css('display','block');
                    }  
                    return decisionTreeQuestion;
                }
                this.decisionTreeNextQuestion = function(answer, questionTemplate, questionNamewithQuestionTemplate, resultQuestionNamewithQuestionTemplate, previousQuestion) {
                    var nextQuestionObj = new Object();
                    var answerOptions = [];
                    var questionPosition = -1;
                    //var previousQuestion = new Object();
                    nextQuestionObj.hasNextQuestion = true;
        
                    if (angular.isUndefined(answer)) {
                        return false;
                    }
                    
                    answerOptions = this.splitAvailableAnswerOptions(questionTemplate);
                        
                    if(answerOptions.length > 0) {
                        for (i=0; i < answerOptions.length; i++) {
                            if (answer == answerOptions[i]) {
                                questionPosition = i;
                                break;
                            }
                        }
                    }   
                    if( angular.isDefined(questionTemplate.ExAM__Single_Next_Question__c) && angular.isDefined(questionTemplate.ExAM__Single_Next_Question__r) ) {
                        if ( angular.isDefined( questionNamewithQuestionTemplate[questionTemplate.ExAM__Single_Next_Question__r.Name] ) ) {                    
                            nextQuestionObj.decisionTreeQuestion = questionNamewithQuestionTemplate[questionTemplate.ExAM__Single_Next_Question__r.Name];
                            previousQuestion[nextQuestionObj.decisionTreeQuestion.Name] =  questionTemplate;
                            nextQuestionObj.previousQuestion = previousQuestion;
                        } else {
                            nextQuestionObj.hasNextQuestion = false;
                        }
                    } else {
                        if ( angular.isDefined(questionTemplate.ExAM__Next_Question__c) || 
                            angular.isDefined(questionTemplate.ExAM__Answer_Options__r)
                           ) {
                            var nextquestionList = [];
                            if ( angular.isUndefined(questionTemplate.ExAM__Answer_Options__r) && angular.isDefined(questionTemplate.ExAM__Next_Question__c) && questionTemplate.ExAM__Next_Question__c != null  ){
                                nextquestionList = this.trimFunc(questionTemplate.ExAM__Next_Question__c.split('~'));    
                            } else {
                                if ( angular.isDefined(questionTemplate.ExAM__Answer_Options__r) && angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records) ){
                                    var nextQuesLen = questionTemplate.ExAM__Answer_Options__r.records.length;
                                    for( var i = 0; i < nextQuesLen; i++ ){
                                        if( angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r) && 
                                            angular.isDefined(questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name) ){
                                            nextquestionList[i] = questionTemplate.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name;
                                        } else {
                                            nextquestionList[i] = 'Nil';
                                        }
                                    }
                                    nextquestionList = this.trimFunc(nextquestionList);
                                }
                            }
                            //Added isDefined codn check on 14-06-2016 to ensure there is a question defined on selected Answer's position
                            if( nextquestionList.length > questionPosition && 
                                angular.isDefined( nextquestionList[questionPosition] ) &&
                                angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[questionPosition]] )
                            ) {
                                nextQuestionObj.decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[questionPosition]];
                            }
                            else if( ( nextquestionList.length == 1 || 
                                ( nextquestionList.length > 0 && ( questionTemplate.ExAM__Question_Type__c == 'Result' || questionTemplate.ExAM__Question_Type__c == 'MultiselectPicklist' ) ) ) && 
                                angular.isDefined( nextquestionList[0] ) &&
                                angular.isDefined( questionNamewithQuestionTemplate[nextquestionList[0]] )
                            ) {
                                nextQuestionObj.decisionTreeQuestion = questionNamewithQuestionTemplate[nextquestionList[0]];
                            } else {
                                nextQuestionObj.hasNextQuestion = false;
                            }     
                            if(questionTemplate != null && questionTemplate.Name != null && 
                                nextQuestionObj.decisionTreeQuestion != null &&
                                nextQuestionObj.decisionTreeQuestion.Name != null && 
                                nextQuestionObj.hasNextQuestion) {
                                
                                previousQuestion[nextQuestionObj.decisionTreeQuestion.Name] =  questionTemplate;
                                nextQuestionObj.previousQuestion = previousQuestion;
                            }
                        } else {
                            nextQuestionObj.hasNextQuestion = false;
                        }
                    }
                    return nextQuestionObj;
                }
        
                //Added on 14-06-2016 to make the compiler wait until Decision Tree Answers save is done successfully
                this.saveDecisionTreeAnswersInBackEnd = function(enteredAnswerOptions, resultTemplateResponse, response, resultTemplateTagObj, managerId, relatedAnswerId, sectionAndQuestionTemplateObj, dtQuestion,allLaunchedDTQuestionRes,contextQuesAndAnsField,quesIdANDAnsId, isNextbutton, viewerName,assessibleObjId, assessbleObjAPI, assTempId, skipDTpath, quesIdAndResponseCount, saveFile) {
                    var defer = $q.defer();
                    var x = 0;
                    var j = 1;
                    var k = 1;
                    var resultTemplateKeyslength = (resultTemplateResponse != null) ? Object.keys(resultTemplateResponse).length : 0;
                    var dtKeyslength = (enteredAnswerOptions != null && enteredAnswerOptions.length > 0) ? enteredAnswerOptions.length : 0;
                    var decisionTreeanswerList = [];
                    var answerSaveResponse = {};
                    answerSaveResponse.quesIdwithAnsIdMap = {};
                    answerSaveResponse.sectionAndQuestionTemplateObj = {};
                    answerSaveResponse.response = {};
                    answerSaveResponse.quesIdAndResponseCount = {};
                    var ansFieldAndVal = {};
                    var splitOfEachContext = [];
                    if(contextQuesAndAnsField != null && contextQuesAndAnsField != '') {
                        if(contextQuesAndAnsField.indexOf(':') > 0) {
                            splitOfEachContext = contextQuesAndAnsField.split(":");
                        } else {
                            splitOfEachContext.push(contextQuesAndAnsField);
                        }
                    }
                    
                    if(splitOfEachContext.length > 0 ) {
                        for(var i = 0; i < splitOfEachContext.length; i++) {
                            var tempArr = [];
                            tempArr = splitOfEachContext[i].split("~");
                            var fieldVal = tempArr[1].toLowerCase();
                            /*angular.forEach(enteredAnswerOptions, function(value, key) {
                               
                                if(key == tempArr[0] && value != undefined && value != null && value != '') {
                                   if(angular.isObject(value)) {
                                        var multicheckValue = ""
                                        for(var option in value){
                                            if(value[option] && option != "$$hashKey") {
                                                if (multicheckValue == "") {
                                                    multicheckValue += option;
                                                } else {
                                                    multicheckValue += '~'+option; 
                                                }
                                            }
                                        } 
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = multicheckValue; 
                                    } else {
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = value;
                                    }
                                }
    
                            });
                            angular.forEach(resultTemplateResponse,function(value,key){
                                
                                if (key.indexOf('~~') > 0) {
                                    if(key.split('~~')[1]) {
                                        if(key.split('~~')[0] == tempArr[0] && key.split('~~')[1].toLowerCase()  == 'ExAM__Response__c'.toLowerCase()
                                           && value != undefined && value != null && value != '') {
                                            if(angular.isObject(value)) {
                                                var multicheckValue = ""
                                                for(var option in value){
                                                    if(value[option] && option != "$$hashKey") {
                                                        if (multicheckValue == "") {
                                                            multicheckValue += option;
                                                        } else {
                                                            multicheckValue += '~'+option; 
                                                        }
                                                    }
                                                } 
                                                ansFieldAndVal[tempArr[1].toLowerCase()] = multicheckValue; 
                                            } else {
                                                ansFieldAndVal[tempArr[1].toLowerCase()] = value;
                                            }
                                        } 
                                    }
                                } 
                            });*/
                            angular.forEach(response, function(value, key) {
                                if(key == tempArr[0] && value != undefined && value != null && value != '') {
                                   if(angular.isObject(value)) {
                                        var multicheckValue = ""
                                        for(var option in value){
                                            if(value[option] && option != "$$hashKey") {
                                                if (multicheckValue == "") {
                                                    multicheckValue += option;
                                                } else {
                                                    multicheckValue += '~'+option; 
                                                }
                                            }
                                        } 
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = multicheckValue; 
                                    } else {
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = value;
                                    }
                                } 
                            });
                            if( viewerName == 'lens' ){
                                angular.forEach(allLaunchedDTQuestionRes, function(res, qId) {
                                    if(qId == tempArr[0] && res != undefined && res != null && res != '') {
                                       /*if(angular.isObject(res)) {
                                            var multicheckValue = '';
                                            for(var option in res){
                                                if(value[option] && option != "$$hashKey") {
                                                    if (multicheckValue == '') {
                                                        multicheckValue += option;
                                                    } else {
                                                        multicheckValue += '~'+option; 
                                                    }
                                                }
                                            } 
                                            ansFieldAndVal[tempArr[1].toLowerCase()] = multicheckValue; 
                                        } else {
                                            ansFieldAndVal[tempArr[1].toLowerCase()] = res;
                                        }*/
                                        ansFieldAndVal[tempArr[1].toLowerCase()] = res;
                                    } 
                                });
                            }
                        }
                    }
                    
                    for (var key in resultTemplateResponse) {
    
                        if (key.indexOf('~~') > 0) {
                            if (resultTemplateTagObj[ key.split('~~')[0] ]) {
                                if( x == 0 ) {
                                    answerObj = {};
                                    answerObj.ExAM__Question_Template__c = key.split('~~')[0];
                                    answerObj.ExAM__Issue_Request__c = managerId;
                                    answerObj.ExAM__Questionnaire_Taker_user__c = '{!$User.Id}';
                                    if( viewerName == 'lens' ){
                                        answerObj.ExAM__Decision_Tree_Launched_Question__c = (Object.keys(dtQuestion).length > 0) ? Object.keys(dtQuestion)[0] : null;
                                    }
                                    if (relatedAnswerId.length) {
                                        answerObj.ExAM__Related_Answer__c = relatedAnswerId;
                                    }
                                    x = x+1;
                                }
                                var fieldApiNameStr = key.split('~~')[1];
                                if (!answerObj[fieldApiNameStr] && resultTemplateResponse[key] != null && resultTemplateResponse[key] != '' && resultTemplateResponse[key] != undefined) {
                                    answerObj[ fieldApiNameStr ] = resultTemplateResponse[key];
                                }
                                if (j == resultTemplateKeyslength) {
                                    if(Object.keys(ansFieldAndVal).length > 0) {
                                        angular.forEach(ansFieldAndVal, function(value1, key1) {
                                            if(!answerObj.hasOwnProperty(key1)) {
                                               answerObj[ key1 ] = value1;
                                            }
                                        });
                                    }
                                    decisionTreeanswerList.push(answerObj);
                                }
                            }
                        }
                        j++;
                    }
                    for (var key in enteredAnswerOptions) { 
                        if (enteredAnswerOptions[key]["recId"] && enteredAnswerOptions[key]["tag"]) {
                            if (dtQuestion[enteredAnswerOptions[key]["recId"]] || !skipDTpath) {
                                var answerObj = {};
                                var quesId = enteredAnswerOptions[key]["recId"];
                                if(dtQuestion[quesId]) {
                                    var tempStr = dtQuestion[quesId];
                                    if(tempStr.indexOf('~~') > 0) {
                                        answerObj.Id = (dtQuestion[quesId]).split('~~')[0];
                                    } else {
                                        answerObj.ExAM__Question_Template__c = quesId;
                                    } 
                                } else {
                                    answerObj.ExAM__Question_Template__c = quesId;
                                }
                                angular.forEach(ansFieldAndVal, function(value1, key1) {
                                    answerObj[ key1 ] = value1;
                                });                       
                                if (typeof enteredAnswerOptions[key]["chosenAnswer"] == 'object'){
                                    var answer = '';
                                    for (var option in enteredAnswerOptions[key]["chosenAnswer"]){
                                        if (enteredAnswerOptions[key]["chosenAnswer"][option] && option != "$$hashKey") {
                                            if (answer.length > 0) {
                                                answer += '~'+option;
                                            }
                                            else {
                                                answer = option;
                                            }
                                        }
                                    }
                                    answerObj.ExAM__Response__c = answer;
                                } else {              
                                    answerObj.ExAM__Response__c = (typeof enteredAnswerOptions[key]["chosenAnswer"] === "boolean") ? enteredAnswerOptions[key]["chosenAnswer"].toString() : enteredAnswerOptions[key]["chosenAnswer"];
                                }
                                answerObj.ExAM__Issue_Request__c = managerId;
                                answerObj.ExAM__Questionnaire_Taker_user__c = '{!$User.Id}';
                                decisionTreeanswerList.push(answerObj);
                                /**
                                    Added on 03-02-2017 to skip required field validation
                                    for decision tree launched question
                                **/
                                if (dtQuestion[enteredAnswerOptions[key]["recId"]]) {
                                    var obj = $('.'+enteredAnswerOptions[key]["recId"]);
                                    $( obj ).each(function( index ) {
                                        if ($(this).hasClass('validatetrue') ) {
                                            $( this ).removeClass('validatetrue');
                                        }
                                        else if ($(this).hasClass('validateradiotrue') ) {
                                            $( this ).removeClass('validateradiotrue');
                                        }
                                        else if ($(this).hasClass('validateBtntrue') ) {
                                            $( this ).removeClass('validateBtntrue');
                                        }
                                        $(this).parent('div').removeClass('slds-has-error');
                                        $(this).parent('div').parent().find('.requiredMessage').css('display','none');
                                    });
                                }
                            } else if( isNextbutton ){
                                if (k == dtKeyslength) {
                                    var answerObj = {};
                                    answerObj.ExAM__Question_Template__c = enteredAnswerOptions[key]["recId"];
                                    angular.forEach(ansFieldAndVal, function(value1, key1) {
                                        answerObj[ key1 ] = value1;
                                    });
                                    if(angular.isObject(enteredAnswerOptions[key]["chosenAnswer"])){
                                        var answer = ""
                                        for(var option in enteredAnswerOptions[key]["chosenAnswer"]){
                                            if(enteredAnswerOptions[key]["chosenAnswer"][option] && option != "$$hashKey") {
                                                if (answer == "") {
                                                    answer += option;
                                                } else {
                                                    answer += '~'+option;
                                                }
                                            }
                                        }
                                        answerObj.ExAM__Response__c = answer;
                                    }
                                    else{
                                        answerObj.ExAM__Response__c = (typeof enteredAnswerOptions[key]["chosenAnswer"] === 'boolean') ? enteredAnswerOptions[key]["chosenAnswer"].toString() : enteredAnswerOptions[key]["chosenAnswer"];
                                    }
                                    //answerObj.ExAM__Issue_Request__c = $scope.currentASMIdStr;
                                    decisionTreeanswerList.push(answerObj);
                                }
                            }
                        } 
                        k++;
                    }
                    if (decisionTreeanswerList.length > 0 || saveFile) {
                        /*decisionTreeResponseObj.dtResponseList = decisionTreeanswerList;*/
                        var AnsIdANDQuesId = _.invert(quesIdANDAnsId);                       
                        var saveDecisionTreeAnsObj = {
                            decisionTreeAnsList:decisionTreeanswerList,
                            quesIdANDAnsIdMap:AnsIdANDQuesId,
                            createdAMId:managerId,
                            assessibleObjId:assessibleObjId,
                            assessibleObjName :assessbleObjAPI,
                            tempId:assTempId,
                            viewerName:viewerName
                        };
                        ExAM.CommonViewerController.saveDecisionTreeAnswerRecords(saveDecisionTreeAnsObj, function(result, event) {
                            if (event.status) {
                                if (result != null && result != '') {
    
                                    var s = JSON.parse(result.replace(/(&quot\;)/g,"\""));
                                    if (s.errMsg) {
                                        defer.reject( s.errMsg );
                                    }
                                    else {
                                        var resultObject = JSON.parse(_.unescape(result));
                                        if( viewerName == 'lens' ){
                                            if (Object.keys(dtQuestion).length > 0) {
                                                delete response[ Object.keys(dtQuestion)[0] ];
                                            }
                                        }
                                        if( viewerName == 'lens' ){
                                            var hasMatchedQtnFound = false;
                                            var launchedQuestionId = Object.keys(dtQuestion)[0];
                                            //Added on 07-07-2016 for Answered icon
                                            for(var i = 0; i < sectionAndQuestionTemplateObj.length; i++) {
                                                if (!hasMatchedQtnFound) {
                                                    for(var j = 0; j < sectionAndQuestionTemplateObj[i].questionTemplateRecords.length; j++) {
                                                        if (!hasMatchedQtnFound) {
                                                            var qtnId = sectionAndQuestionTemplateObj[i].questionTemplateRecords[j].Id;
                                                            if( (qtnId == launchedQuestionId) ) {
                                                                if( resultObject['templateIdAndResponsesCount'][launchedQuestionId] > 0 ){
                                                                    quesIdAndResponseCount[qtnId] = resultObject['templateIdAndResponsesCount'][launchedQuestionId];
                                                                }
                                                                hasMatchedQtnFound = true;
                                                                
                                                                //Added on 14-12-2017 for showing "isAnswered icon for decision tree answer save"
                                                                sectionAndQuestionTemplateObj[i].questionTemplateRecords[j]['isAnswered'] = true;
                                                            }
                                                        }
                                                        else {
                                                            break;
                                                        }
                                                    }
                                                }
                                                else {
                                                    break;
                                                }
                                            }
                                        }
                                        answerSaveResponse.quesIdAndResponseCount = quesIdAndResponseCount;
                                        answerSaveResponse.quesIdwithAnsIdMap = resultObject['questioIdWithCreatedAnswerId'];
                                        answerSaveResponse.sectionAndQuestionTemplateObj = sectionAndQuestionTemplateObj;
                                        answerSaveResponse.response = response;
                                        answerSaveResponse.amId = resultObject.createdAMId;
                                        answerSaveResponse.assessableObjectId = resultObject.assessableObjId;
                                        defer.resolve(answerSaveResponse);
                                    }
                                }
                            }
                        }, function(error) {
                            defer.reject(error);
                        });
                    } else {
                        defer.resolve(answerSaveResponse);
                    }
                    return defer.promise;
                }
    
                //Added on 14-06-2016 to save files uploaded in Decision Tree Result Template
                this.saveUploadedFilesAsAttachments = function(savedAnswers, uploadedImage, uploadResultPhoto, dtResponseFile, newASMId, assessableObjId) {
    
                    var defer = $q.defer();
                    var attachmentlist = [];
                    var attachmentQuestionId;
                    
                    for (var ques in uploadResultPhoto) {
                        if (savedAnswers.hasOwnProperty(ques)) {
                            var photoArr = uploadResultPhoto[ques];
                            angular.forEach(photoArr, function(value1, key) {   
                                if( angular.isDefined(value1.name) && angular.isDefined(value1.resultbody) ) {
                                    var attach = {}
                                    attach.fileNameStr = value1.name;
                                    attach.cType = value1.contenttype;
                                    attach.imgContent = value1.resultbody;
                                    attach.parentIdStr = savedAnswers[ques];
                                    attach.isPrivate = false;
                                    attachmentlist.push( attach );
                                }
                            }); 
                        }                                
                    }
                    for (var key in uploadedImage) {
    
                        if (savedAnswers.hasOwnProperty(key)) {
                            attachmentQuestionId = key;
                            var attach = {}
                            attach.fileNameStr        = uploadedImage[key].name;
                            attach.cType = uploadedImage[key].contenttype;
                            attach.imgContent        = uploadedImage[key].resultbody;
                            attach.parentIdStr    = savedAnswers[key];
                            attach.isPrivate   = false;
                            attachmentlist.push( attach );
                        }
                    }
                    for (var key in dtResponseFile) {
                        if( angular.isDefined(dtResponseFile[key]) && angular.isDefined(dtResponseFile[key][0].resultbody) && dtResponseFile[key][0].tag === true ){
                            var attach = {}
                            attach.fileNameStr = 'Qt('+dtResponseFile[key][0].quesName+') '+dtResponseFile[key][0].name;
                            attach.cType = dtResponseFile[key][0].contenttype;
                            attach.imgContent        = dtResponseFile[key][0].resultbody;
                            if( dtResponseFile[key][0].quesType == 'File Question - AM' ){
                                attach.parentIdStr    = newASMId;
                            } else if( dtResponseFile[key][0].quesType == 'File Question - Assessable Object' ) {
                                attach.parentIdStr    = assessableObjId;
                            }
                            attach.isPrivate   = false;
                            attachmentlist.push( attach );
                        }
                    }
                    if ( attachmentlist.length > 0 ) {
                        try {
                            
                            defer.resolve('Upload Success');
                        }
                        catch(error){
                            defer.reject( error.message );
                        }
                    }
                    else {
                        defer.resolve('No Files to Upload');
                    }
                    return defer.promise;
                }
                /** Decision Tree Functionality Ends **/
    
                /** Image Question Type Answer Option Finding Service Starts **/
                var optionImage = {};
                var selectedImage = {};
                this.imageTypeQuesAnswer = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr) {
                   
                    optionImage[usrSelectImageQuestion.Id] = true;
    
                    $.each(imgArr, function() {
                        if (this.url === imgArr[usrSelectImage].url) {
                            $('#'+this["recId"]).removeClass('noneImgBorder');
                            $('#'+this["recId"]).addClass('imgBorder');
                        }
                        else {
                            $('#'+this["recId"]).removeClass('imgBorder');
                            $('#'+this["recId"]).addClass('noneImgBorder');
                        }
                    });                
    
                    var options = [];
                    options = this.splitAvailableAnswerOptions(usrSelectImageQuestion);
                    
                    if(options.length > 0) {
                        selectedImage["optionText"] = options[usrSelectImage];
                        selectedImage["optionImage"] = optionImage;
                    }
                    return selectedImage;
                }
                /** Image Question Type Answer Option Finding Service Ends **/
    
                /** 
                    Added on 23-06-2016 for Implementing Dependent Questions Functionality
                    Dependent Questions Functionality Starts
                **/
                
                this.returnDependentQuestion = function(forWhichQuestion, selectedAnswer, dependentQuestionsObj,response) {
    
                    var defer = $q.defer();
                    var availableAnswerOptions = [];
                    var availableDependentQuestionsOptions = [];
                    var answerPosition = -1;
                    var returnDependentQues = {};
                    
                    availableAnswerOptions = this.splitAvailableAnswerOptions(forWhichQuestion);
                        
                    if(availableAnswerOptions.length > 0) {
                        for (var i=0; i < availableAnswerOptions.length; i++) {
                            if (selectedAnswer == availableAnswerOptions[i]) {
                                answerPosition = i;
                                break;
                            }
                        }
                    }
                    if ( (angular.isDefined(forWhichQuestion.ExAM__Dependent_Question__c ) && angular.isUndefined(forWhichQuestion.ExAM__Next_Question__c) && angular.isUndefined(forWhichQuestion.ExAM__Single_Next_Question__c)) || angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r) ) {
                        if( angular.isUndefined(forWhichQuestion.ExAM__Answer_Options__r) ){
                            if (forWhichQuestion.ExAM__Dependent_Question__c.indexOf('~') > 0) {
                                availableDependentQuestionsOptions = this.trimFunc(forWhichQuestion.ExAM__Dependent_Question__c.split('~'));
                            }
                            else {
                                var temp = [];
                                temp.push(forWhichQuestion.ExAM__Dependent_Question__c );
                                var returnStr = this.trimFunc(temp);
                                availableDependentQuestionsOptions.push(temp);
                            }
                        } else {
                            if ( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records) ){
                                var depQuesOptLen = forWhichQuestion.ExAM__Answer_Options__r.records.length;
                                for( var i = 0; i < depQuesOptLen; i++ ){
                                    if( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r) && 
                                        angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r.Name) ){
                                        availableDependentQuestionsOptions[i] = forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r.Name;
                                    } else {
                                        availableDependentQuestionsOptions[i] = 'Nil';
                                    }
                                }
                                availableDependentQuestionsOptions = this.trimFunc(availableDependentQuestionsOptions);
                            }
                        }
                        if( availableDependentQuestionsOptions.length > 0 ) {
                            for(var j = 0; j < availableDependentQuestionsOptions.length; j++) {
                                var quesRec = {};
                                if( angular.isDefined(dependentQuestionsObj) && angular.isDefined(dependentQuestionsObj[availableDependentQuestionsOptions[j]])) {
                                    quesRec = dependentQuestionsObj[availableDependentQuestionsOptions[j]].Id;
                                    
                                    if(response.hasOwnProperty(quesRec) && angular.isDefined(response[quesRec])) {
                                        delete response[quesRec];
                                    }
                                }
                            }
                        }
                        if (availableDependentQuestionsOptions.length > answerPosition &&
                            angular.isDefined( availableDependentQuestionsOptions[answerPosition] ) && angular.isDefined( dependentQuestionsObj ) &&
                            angular.isDefined( dependentQuestionsObj[ availableDependentQuestionsOptions[answerPosition]] )
                        ) {
                            returnDependentQues['dependentQuestion'] = dependentQuestionsObj[availableDependentQuestionsOptions[answerPosition]];
                            returnDependentQues['res'] = response;
                            defer.resolve(returnDependentQues);
                            //defer.resolve(dependentQuestionsObj[availableDependentQuestionsOptions[answerPosition]]);
                        }
                        else if ( availableDependentQuestionsOptions.length == 1 && angular.isDefined( availableDependentQuestionsOptions[0] ) &&
                                  angular.isDefined( dependentQuestionsObj) && angular.isDefined( dependentQuestionsObj[ availableDependentQuestionsOptions[0]] )
                        ) {
                            returnDependentQues['dependentQuestion'] = dependentQuestionsObj[availableDependentQuestionsOptions[0]];
                            returnDependentQues['res'] = response;
                            defer.resolve(returnDependentQues);
                            //defer.resolve(dependentQuestionsObj[availableDependentQuestionsOptions[0]]);
                        } else {
                            defer.reject( 'Nil Data' );
                        }
                    }
                    return defer.promise;
                }
                this.isHasNextQuestionEnable = function(decisionTreeQuestion,questionNamewithQuestionTemplate) {
                    var relatedDTClickButton = true;
                    if( angular.isDefined(decisionTreeQuestion.ExAM__Single_Next_Question__c) && 
                        angular.isDefined(decisionTreeQuestion.ExAM__Single_Next_Question__r) ){  
                        if( angular.isUndefined(questionNamewithQuestionTemplate[decisionTreeQuestion.ExAM__Single_Next_Question__r.Name])){
                            relatedDTClickButton = false;
                        }
                    } else { 
                        if ( angular.isDefined(decisionTreeQuestion.ExAM__Next_Question__c) ||
                            angular.isDefined(decisionTreeQuestion.ExAM__Answer_Options__r) ){
        
                            var nextquestionList = [];
                            if ( angular.isUndefined(decisionTreeQuestion.ExAM__Answer_Options__r) ){
                                nextquestionList = this.trimFunc(decisionTreeQuestion.ExAM__Next_Question__c.split('~'));
                            } else {
                                if ( angular.isDefined(decisionTreeQuestion.ExAM__Answer_Options__r.records) ){
                                    var nextQuesLen = decisionTreeQuestion.ExAM__Answer_Options__r.records.length;
                                    
                                    if(nextQuesLen == 1) {
                                        if( angular.isDefined(decisionTreeQuestion.ExAM__Answer_Options__r.records[0].ExAM__Next_Question__r) &&
                                            angular.isDefined(decisionTreeQuestion.ExAM__Answer_Options__r.records[0].ExAM__Next_Question__r.Name) ){
                                            nextquestionList[0] = decisionTreeQuestion.ExAM__Answer_Options__r.records[0].ExAM__Next_Question__r.Name;
                                        }
                                    }
                                    nextquestionList = this.trimFunc(nextquestionList);
                                }
                            }
                            if(nextquestionList.length > 0 && nextquestionList.length == 1 && 
                               angular.isUndefined(questionNamewithQuestionTemplate[nextquestionList[0]])) {
                                relatedDTClickButton = false;
                            }
                        }
                    }
                    return relatedDTClickButton;
                }
                this.fileSizeCalculator = function(file){
                    var fileLen = file.length;
                    var cnt = (file.match(/=/g) || []).length;
                    var fileSize = 0;
                    if( fileLen > 0 ){
                        fileSize = (fileLen*3)/4-cnt;
                    }
                    if(fileSize > 750000){
                        return true;
                    }
                    return false;
                }
                this.validateDTvalues = function(isPrevious){
                    var errorFlag = true;
                    var formattedPhoneNumberObj = {};
                    if(!isPrevious){
                        $('.validateText:visible').each(function() {
                            var text = $(this).val(); 
                            if( !text.length > 0 ) {
                                errorFlag = false;   
                            }
                        });
                        $('.validateTextArea:visible').each(function() {
                            var textarea = $(this).val(); 
                            if( !textarea.length > 0 ) {
                                errorFlag = false;   
                            }
                        });
                        $('.validateDate:visible').each(function() {
                            var date = $(this).val(); 
                            if( !date.length > 0 ) {
                                errorFlag = false;   
                            }
                        });
                    }
                    $('.validateDTEmail:visible').each(function() {
                        
                        var validateResult;
                        var email = $(this).val(); 
                        var regx = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        
                        if(email.length > 0) {
                            
                            validateResult =  regx.test(email);
                            if(validateResult == false ) {
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.validateDTEmailMessage').css('display','block');
                                errorFlag = false;   
                            } else {
    
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.validateDTEmailMessage').css('display','none');
                            }
                        } else if(!isPrevious){
                            errorFlag = false; 
                        }
                    });
                    $('.validateDTPhone:visible').each(function() {
                        var validateResult;
                        var PhNum;
                        var phoneVal = $(this).val(); 
                        var phoneId = $(this).attr('id'); 
                        var phoneRegx = /^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$/;
                        if(phoneVal.length > 0) { 
                           
                            validateResult =  phoneRegx.test(phoneVal);
                            PhNum  = phoneVal.replace(/[()-\s+]/g,'');
                            formattedPhoneNumberObj[phoneId] = PhNum;
                            if(validateResult == false){
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.validateDTPhNumMessage').css('display','');
                                errorFlag = false; 
                            } else {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.validateDTPhNumMessage').css('display','none');
                            }
                        } else if(!isPrevious){
                            errorFlag = false; 
                        }
                    });
                    $('.validateDTCurrency:visible').each(function() {
                        
                       var validateResult = false;
                       var CurNum;
                       var CurVal = $(this).val(); 
                       var CurId = $(this).attr('id'); 
                       var numbers = /^[0-9]+$/;
                       var decimal=  /^[-+]?[0-9]+\.[0-9]+$/;
                       if(CurVal.length > 0) { 
                           CurNum = CurVal.replace('$','');
                           if( CurNum.match(numbers) || CurNum.match(decimal) ) { 
                               validateResult = true; 
                               formattedPhoneNumberObj[CurId] = CurNum;
                           } else { 
                               validateResult = false; 
                           }  
                           if(validateResult == false){
                                $(this).parent('div').addClass('slds-has-error');
                                $(this).parent('div').find('.validateDTCurNumMessage').css('display','block');
                                errorFlag = false;  
                           } else {
                                $(this).parent('div').removeClass('slds-has-error');
                                $(this).parent('div').find('.validateDTCurNumMessage').css('display','none');
                           }
                       } else if(!isPrevious){
                           errorFlag = false; 
                       }
                    });
                    return errorFlag;
                }
                this.hideDTMessage = function(){
                    $('.validateDTEmail').parent('div').removeClass('slds-has-error');
                    $('.validateDTPhone').parent('div').removeClass('slds-has-error');
                    $('.validateDTCurrency').parent('div').removeClass('slds-has-error');
                    $('.validateDTEmailMessage').css('display','none');
                    $('.validateDTCurNumMessage').css('display','none');
                    $('.validateDTPhNumMessage').css('display','none');
                }
                this.getRandomQuestions = function(filteredQuestions,quesCount){
                    var questions = [];
                    questions = filteredQuestions;
                    var defer = $q.defer();
                    var randomQuestions = [];
                    var caseQuestionsArray = [];
                    var hiddenQuesCount = 0;
                    var orderNoArr = [];
                    for(var i=0; i<quesCount; i++){
                        var orderNo = Math.floor(Math.random() * (questions.length+1));
                        if( !_.contains(orderNoArr, orderNo) && angular.isDefined(questions[orderNo]) && angular.isDefined(questions[orderNo]) && questions[orderNo].ExAM__Question_Type__c == 'Hidden' ){
                            hiddenQuesCount++;
                            orderNoArr[i] = orderNo;
                            i--;
                            
                        } else if( questions[orderNo] != null && !_.contains(orderNoArr, orderNo) && questions[orderNo].ExAM__Question_Type__c != 'Hidden'){
                            if(questions[orderNo].ExAM__Question_Type__c != 'Case'){
                                randomQuestions.push(questions[orderNo]);
                            } else {
                                caseQuestionsArray.push(questions[orderNo]);
                            }
                            orderNoArr[i] = orderNo;
                        } else {
                            function recursiveOrderNumber(questions){
                                
                                orderNo = Math.floor(Math.random() * (questions.length+1));
                                if(questions[orderNo] != null && !_.contains(orderNoArr, orderNo) && questions[orderNo].ExAM__Question_Type__c != 'Hidden'){
                                    if(questions[orderNo].ExAM__Question_Type__c != 'Case'){
                                        randomQuestions.push(questions[orderNo]);
                                    } else {
                                        caseQuestionsArray.push(questions[orderNo]);
                                    }
                                    orderNoArr[i] = orderNo;
                                } else if(questions.length > (randomQuestions.length+hiddenQuesCount)){
                                    recursiveOrderNumber(questions);
                                }
                                
                            }
                            recursiveOrderNumber(questions);
                        }
                        
                    }
                    randomQuestions = randomQuestions.concat(caseQuestionsArray);
                    defer.resolve( randomQuestions );
                    return defer.promise;
                }
                var mapcount = 0;
                this.maphilightservice = function() {
                    
                    $timeout(function(){
                        
                        $('.map').maphilight({strokeColor:'808080',strokeWidth:0,fillColor:'00cd27'});
                        //map clicks
                        $(".tabs area").click(function(){
                           mapcount++;
                           //This block is what creates highlighting by trigger the "alwaysOn", 
                           var data = $(this).data('maphilight') || {};
                           data.alwaysOn = true;
                           $(this).data('maphilight', data).trigger('alwaysOn.maphilight');
                           data.alwaysOn = false;
                           if(typeof tempThis === "undefined" && tempThis != $(this)){
                               tempThis.data('maphilight', data).trigger('alwaysOn.maphilight'); 
                           }
                           tempThis =  $(this); 
                           
                           //there is also "neverOn" in the docs, but not sure how to get it to work     
                           if ($(this).hasClass("current") == false){
                               var thisTarget = $(this).attr("href");                          
                               $(this).parents(".tabs").find('area.current').removeClass('current');
                               $(this).addClass('current');      
                               $(this).parents(".tabs").nextAll(".tab-content").children(":visible").fadeOut(1, function() {
                                   $(thisTarget).fadeIn("fast");
                               });
                           }
                           return false; 
                      }); 
                    },200); 
                }
                this.isFileSave= function(responseFile, dtAMandAssObjResponseFile, isDt){
                    var saveFile = false;
                    if( isDt ){
                        angular.forEach(dtAMandAssObjResponseFile, function(value, key) {
                            if((angular.isDefined(dtAMandAssObjResponseFile[key][0].tag) && dtAMandAssObjResponseFile[key][0].tag) && angular.isDefined(dtAMandAssObjResponseFile[key][0].resultbody) ){
                                saveFile = true;
                            }
                        });
                    } else {
                        angular.forEach(responseFile, function(value, key) {
                            if(angular.isDefined(responseFile[key][0].resultbody) || angular.isDefined(responseFile[key][0].id)) {
                                saveFile = true;
                            }
                        });
                    }
                    return saveFile;
                }
            });
            mainApp.controller('viewerCommonController', function($scope, commonAppService,_,$timeout,$sce,$rootScope) {
                $scope.saveHiddenResponse = {};
                $scope.secId = null;
                $scope.isSingleQuesMode = false;
                $scope.ansFileOption ='';
                $scope.ansFileId ='';
                $scope.primaryAMObj = {};
                $scope.primaryAMObj.primaryAMId = '';
                
                $scope.$on('setHiddenResponse',function(event,arg){
                    //Added on 10-12-2017 for save hidden aswers
                    $scope.secId = arg.secId;
                    if( angular.isDefined($scope.saveHiddenResponse[$scope.secId]) ){
                        $scope.saveHiddenResponse[$scope.secId] = false;
                    } else {
                        $scope.saveHiddenResponse[$scope.secId] = true;
                    }
                    $scope.isSingleQuesMode = $scope.saveHiddenResponse[$scope.secId];
                });
                
                //Added on 01-07-2016 for Knowledge article link
                $scope.openLink = function(link) {
                    if(link.indexOf('http') > -1 || link.indexOf('https') > -1) {
                        window.open(link,'_blank');
                    } else {
                         window.open('https://'+link,'_blank');
                    }
                     
                }
                $scope.saveUsrEnteredAnswerOptions = function(isSubmit) {
                    var saveFile = commonAppService.isFileSave($scope.responseFile, {}, false);
                    $scope.showMessage = false;
                    commonAppService.doReqdFieldValidation($scope.response,$scope.isSelectBtnOptn,$scope.selectedImage,isSubmit,$scope.signImage,$scope.fileAttach,$scope.responseFile).then(function(validateSuccessResponse) {
                        if( typeof validateSuccessResponse == 'object' ) {
                            $.each(validateSuccessResponse, function(key, value) {
                                if ($scope.response[key]) {
                                    $scope.response[key] = value;
                                }
                            });
                        }
                        if( $scope.viewerName == 'public' && 
                             ( ( $scope.tqMessage != '' && angular.isDefined($scope.showModalWindow) && $scope.showModalWindow )
                             ||( $scope.tqMessage == '' && angular.isDefined($scope.showModalWindow) && $scope.showModalWindow && $scope.modalWindowTxt != '' ) ) 
                             && !$scope.calledOnce ) {
                               $scope.openModalWindow();
                        } else {
                            $scope.calledOnce = true;
                        }
                        if($scope.calledOnce) {
                            $('.spinner, .slds-spinner--small').show();
                            
                            commonAppService.saveUsrEnteredAnswers($scope.quesIdANDAnsId, $scope.response, $scope.caseResponse, $scope.comment, $scope.currentASMAssesssmentTemplateTdStr, 
                                                                $scope.currentASMIdStr, isSubmit, $scope.sectionAndQuestionTemplateObj,$scope.decisionTreeQuesIdwithAnswerIdObj, 
                                                                $scope.contextQuesAndAnsField, $scope.decisionTreeLaunchedQuestionRes,$scope.assessableObjId,$scope.assessbleObjAPI,$scope.viewerName,
                                                                $scope.ipAddress, $scope.PARecordId, $scope.startTime, $scope.saveHiddenResponse[$scope.secId], 
                                                                $scope.secId,false, saveFile, $scope.quesIdWithQuestionTemplate).then(function(savedResponseData){
                                if (savedResponseData.showMessage && !savedResponseData.hasActionSuccess) {
        
                                    $('.spinner, .slds-spinner--small').hide();
                                    $scope.showMessage = savedResponseData.showMessage;
                                    $scope.messageText = savedResponseData.messageText;
                                    $scope.hasActionSuccess = savedResponseData.hasActionSuccess;                            
                                } else if (savedResponseData.showMessage && savedResponseData.hasActionSuccess) {
                                    //call att upload method
                                    commonAppService.callAttachmentUploadMethod(savedResponseData, $scope.quesIdAndAnsAttId, $scope.photo, $scope.fileAttach, $scope.signImage,{}, $scope.deleteAttFile, $scope.responseFile, {}).then(function(data1) {
                                        $('.spinner, .slds-spinner--small').hide();
                                        $scope.showMessage = true;
                                        $scope.hasActionSuccess = savedResponseData.hasActionSuccess;  
                                        $scope.messageText = savedResponseData.messageText;  
                                        $(window).scrollTop(0);
                                        
                                        //Added for Answered icon in lens viewer
                                        if($scope.viewerName == 'lens') {
                                            $scope.sectionAndQuestionTemplateObj = savedResponseData.sectionAndQuestionTemplateObj;
                                        } 
                                        if($scope.viewerName == 'public') {
                                            if (savedResponseData.returnURL != null && savedResponseData.returnURL.length > 0  && $scope.webIntercept === 'false') {
                                                window.open(savedResponseData.returnURL, '_self');
                                            } else if($scope.webIntercept === 'true') {
                                                $timeout(function() {
                                                    parent.postMessage("Success Submit","*");
                                                },0);
                                            } 
                                        }       
                                        //clear all variables after answer save happens successfully in backend
                                        $scope.response = {};
                                        $scope.comment = {};
                                        $scope.photo = {};
                                        $scope.signImage = {};
                                        $scope.nextDependentQuestion = {};
                                        $scope.selectedImage = {};
                                        $scope.selOptionIndex = {};
                                        $scope.isSelectBtnOptn = {};
                                        if( angular.isDefined(data1.fileAttach) ){
                                            $scope.fileAttach = data1.fileAttach;
                                        }
                                        $('.fileUpload').css('display','none');
                                        if( angular.isDefined(data1.responseFile) ){
                                            $scope.responseFile = data1.responseFile;
                                        }
                                        $scope.caseResponse = {};       
                                        $scope.decisionTreeQuesIdwithAnswerIdObj = {};
                                        /*angular.element("input[type='file']").val(null);*/
                                        $('.liClass').removeClass('slds-is-selected');
                                        $('.imgStyle').removeClass('imgBorder');
                                        $('.btnStyle').removeClass('btnBorder');
                                        $scope.decisionTreeLaunchedQuestionRes = {};
                                        $scope.hilightinit();
                                    });
                                } 
                            },function(errordata){
        
                                $('.spinner, .slds-spinner--small').hide();
                                $scope.showMessage = errordata.showMessage;
                                $scope.messageText = errordata.messageText;
                                $scope.hasActionSuccess = errordata.hasActionSuccess; 
                                $(window).scrollTop(0);                            
                            });
                        }
                    },
                    function(validateErrorResponse) {
                        $scope.showMessage = validateErrorResponse.showMessage;
                        $scope.messageText = validateErrorResponse.messageText;
                        $scope.hasActionSuccess = validateErrorResponse.hasActionSuccess; 
                        $(window).scrollTop(0); 
                        return null;
                    });
                }
                $scope.splitOptions = function(quesRec) {
                    return commonAppService.splitAvailableAnswerOptions(quesRec);
                }
                $scope.initializeDTFiles = function(nextQues){
                    if( angular.isUndefined($scope.photos[nextQues.Id]) && ( nextQues.ExAM__Question_Type__c == 'File Question - Answer' || nextQues.ExAM__Question_Type__c == 'Result' ) ){
                        $scope.photos[nextQues.Id] = [];
                        $scope.photos[nextQues.Id].push({name:'No file chosen'});
                    } else if( angular.isUndefined($scope.dtResponseFile[nextQues.Id]) && (nextQues.ExAM__Question_Type__c == 'File Question - AM' || nextQues.ExAM__Question_Type__c == 'File Question - Assessable Object') ){
                        $scope.dtResponseFile[nextQues.Id] = [];
                        $scope.dtResponseFile[nextQues.Id].push({name:'No file chosen',quesName:nextQues.Name,quesType:nextQues.ExAM__Question_Type__c,tag:true});
                    }else if(angular.isUndefined($scope.DecisionTreeresponse[nextQues.Id]) && nextQues.ExAM__Question_Type__c == 'Checkbox' ) {
                        $scope.DecisionTreeresponse[nextQues.Id] = false;
                    }
                }
                $scope.openDecisionTreePopUp = function(usrEnteredAnswerOpt, forWhichQuestion) {

                    commonAppService.hideDTMessage();
                    $scope.relatedDTClickButton = true;
                    $scope.DecisionTreeresponse = {};
                    $scope.DTResultResponse = {};
                    $scope.DTResultQtnTag = {};
                    $scope.DecisionTreeResponseArr = [];
                    //Added on 07-08-2017 for preventing dependent question assigned as a decisiontree launched question
                    $scope.isDecisionTree = false;
                    if( angular.isDefined(forWhichQuestion.ExAM__Single_Next_Question__c) && angular.isDefined(forWhichQuestion.ExAM__Single_Next_Question__r) ){
                        $scope.isDecisionTree = true;
                    } else {
                        if( forWhichQuestion.ExAM__Answer_Options__r ) {
                            var len = forWhichQuestion.ExAM__Answer_Options__r.records.length;
                            for( var i=0;i<len;i++ ){
                                if(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__c != null) {
                                    $scope.isDecisionTree = true;
                                    break;
                                }
                            }
                        } else if( forWhichQuestion.ExAM__Next_Question__c != null &&  forWhichQuestion.ExAM__Dependent_Question__c == null) {
                            $scope.isDecisionTree = true;
                        }
                    }
                    if( $scope.isDecisionTree ){
                        /*Added on 20-07-2017 for delete decision tree old path by one time assessment
                        $scope.decisionTreeStartQuestion = forWhichQuestion.Name;*/
                        
                        if ( forWhichQuestion.ExAM__Question_Type__c != 'Result' && $scope.viewerName == 'lens' ) {
                            
                            if ( !$scope.DecisionTreeresponse[forWhichQuestion.Id] ) {
                                $scope.AnsId = '';
                                if ( $scope.quesIdANDAnsId[forWhichQuestion.Id] && $scope.oneTimeAss ) {
                                    $scope.AnsId = $scope.quesIdANDAnsId[forWhichQuestion.Id];
                                }
                                $scope.DecisionTreeresponse[forWhichQuestion.Id] = ($scope.AnsId.length > 0) ? $scope.AnsId+'~~'+usrEnteredAnswerOpt : usrEnteredAnswerOpt;
                                var dtObj = {"recId": forWhichQuestion.Id, "chosenAnswer": usrEnteredAnswerOpt, "tag": true};
                                $scope.DecisionTreeResponseArr.push( dtObj );
                            }
                            if ( !$scope.isCalledFirstTime ) {
                                $scope.decisionTreeLaunchedQuestion[forWhichQuestion.Id] = $scope.DecisionTreeresponse[forWhichQuestion.Id];
                                $scope.decisionTreeLaunchedQuestionRes[forWhichQuestion.Id] = usrEnteredAnswerOpt;
                                $scope.isCalledFirstTime = true;
                            }
                        }
                        $scope.decisionTreeQuestion = commonAppService.decisionTreeOpenWindow(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate);
                        $scope.decisionTreeStartQuestionId = forWhichQuestion.Id;
                    }
                     
                    if ( $scope.decisionTreeQuestion != null && angular.isDefined($scope.decisionTreeQuestion.ExAM__Question_Type__c) && $scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                        $scope.DTResultQtnTag[ $scope.decisionTreeQuestion.Id ] = true;
                        $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion);
                        $scope.relatedDTClickButton = commonAppService.isHasNextQuestionEnable($scope.decisionTreeQuestion, $scope.questionNamewithQuestionTemplate);
                    }
                    if( $scope.decisionTreeQuestion != null ){
                        $scope.initializeDTFiles($scope.decisionTreeQuestion);
                    }
                }
                $scope.closeDecisionTreePopUp = function() {
                    $('.imgDTStyle').removeClass('imgBorder');
                    $('.DecisionTree').addClass('slds-modal__close');
                    $('.DecisionTree').removeClass('slds-fade-in-open');
                    $scope.DecisionTreeresponse = {};
                    $scope.DTResultResponse = {};
                    $scope.DTResultQtnTag = {};
                    $scope.DecisionTreeResponseArr = [];
                    $scope.photos = {};
                    $scope.dtResponseFile = {};
                    $scope.previousQuestion = {};
                    $scope.decisionTreeLaunchedQuestion = {};
                    $scope.isCalledFirstTime = false;
                    $scope.DTselOptionIndex = {};
                    if(angular.isDefined($scope.response[$scope.decisionTreeStartQuestionId])) {
                        delete $scope.response[$scope.decisionTreeStartQuestionId];
                    }
                    if(angular.isDefined($scope.decisionTreeLaunchedQuestionRes[$scope.decisionTreeStartQuestionId])) {
                        delete $scope.decisionTreeLaunchedQuestionRes[$scope.decisionTreeStartQuestionId];
                    }
                }
                $scope.renderNextQuestionInDecisionTreeFunCall = function(answer, questionTemplate) {
                    if( $scope.renderNextQuesAuto ){    
                        $scope.renderNextQuestionInDecisionTree(answer, questionTemplate);
                    }
                }
                $scope.renderNextQuestionInDecisionTree = function(usrEnteredAnswerOpt, forWhichQuestion) {
                    if( forWhichQuestion.ExAM__Question_Type__c == 'Signature' && $scope.canvasClick ){
                        $scope.dtSignImage[forWhichQuestion.Id] = signature.toDataURL('image/png');
                    }
                    $scope.relatedDTClickButton = true;
                    var errorFlag = commonAppService.validateDTvalues(false);
                    var isMultiSelectResponse = false;
                    $scope.nextQuestObj = {};
                    $scope.nextQuestObj.hasNextQuestion = false;
                    if( typeof usrEnteredAnswerOpt === "boolean" ){
                        usrEnteredAnswerOpt = usrEnteredAnswerOpt.toString();
                    }
                    if( forWhichQuestion.ExAM__Question_Type__c == 'MultiselectPicklist' ){
                        angular.forEach(usrEnteredAnswerOpt, function(value, key) {
                            if( value ){
                                isMultiSelectResponse = true;
                            }
                        });
                    }
                    if (angular.isDefined(usrEnteredAnswerOpt) && ( angular.isDefined(usrEnteredAnswerOpt.length) || isMultiSelectResponse ) && errorFlag) {
                        
                        var hasObjectExists = false;
                        var dtObj = {};
                        dtObj["recId"] = forWhichQuestion.Id;
                        dtObj["chosenAnswer"] = usrEnteredAnswerOpt;
                        dtObj["tag"] = true;
                        if ($scope.DecisionTreeResponseArr.length == 0) {
                            $scope.DecisionTreeResponseArr.push( dtObj );
                        }
                        else {
                            for(eachObj in $scope.DecisionTreeResponseArr) {
                                if ( $scope.DecisionTreeResponseArr[eachObj]["recId"] == forWhichQuestion.Id ) {
                                    hasObjectExists = true;
                                    $scope.DecisionTreeResponseArr[eachObj]["chosenAnswer"] = usrEnteredAnswerOpt;
                                    $scope.DecisionTreeResponseArr[eachObj]["tag"] = true;
                                }
                            }
                            if (!hasObjectExists) {
                                $scope.DecisionTreeResponseArr.push( dtObj );
                            }
                        }
                        $scope.nextQuestObj = commonAppService.decisionTreeNextQuestion(usrEnteredAnswerOpt, forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                        if ($scope.nextQuestObj.hasNextQuestion) {
        
                            $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                            $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;
                            if ( angular.isDefined($scope.decisionTreeQuestion.ExAM__Question_Type__c) && $scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Checkbox' ) {
                                if (!$scope.DecisionTreeresponse[$scope.decisionTreeQuestion.Id]) {
                                    $scope.DecisionTreeresponse[$scope.decisionTreeQuestion.Id] = false;
                                }
                            }
                            if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                                $scope.DTResultQtnTag[ $scope.decisionTreeQuestion.Id ] = true;
                                $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion );
                                $scope.relatedDTClickButton = commonAppService.isHasNextQuestionEnable($scope.decisionTreeQuestion, $scope.questionNamewithQuestionTemplate);
                            }
                            $scope.initializeDTFiles($scope.decisionTreeQuestion);
                        }
                        else {
                            //Added on 14-06-2016 for Related Decision Tree chain functionality
                            $scope.saveChosenAnswerOptionInDecisionTreeQuestions(true,forWhichQuestion, 'SAVE');
                        }
                    } else if( angular.isDefined(forWhichQuestion.ExAM__Question_Type__c) && (forWhichQuestion.ExAM__Question_Type__c == 'File Question - AM' || forWhichQuestion.ExAM__Question_Type__c == 'File Question - Assessable Object') && errorFlag ){
                        if( angular.isDefined($scope.dtResponseFile[forWhichQuestion.Id]) && angular.isDefined($scope.dtResponseFile[forWhichQuestion.Id][0].resultbody)){
                            $scope.dtResponseFile[forWhichQuestion.Id][0]['tag'] = true;
                            $scope.nextQuestObj = commonAppService.decisionTreeNextQuestion('', forWhichQuestion, $scope.questionNamewithQuestionTemplate, $scope.resultQuestionNamewithQuestionTemplate, $scope.previousQuestion);
                            if ($scope.nextQuestObj.hasNextQuestion) {
    
                                $scope.previousQuestion = $scope.nextQuestObj.previousQuestion;
                                $scope.decisionTreeQuestion = $scope.nextQuestObj.decisionTreeQuestion;
                                if ( angular.isDefined($scope.decisionTreeQuestion.ExAM__Question_Type__c) && $scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Checkbox' ) {
                                    if (!$scope.DecisionTreeresponse[$scope.decisionTreeQuestion.Id]) {
                                        $scope.DecisionTreeresponse[$scope.decisionTreeQuestion.Id] = false;
                                    }
                                }
                                if ($scope.decisionTreeQuestion.ExAM__Question_Type__c == 'Result' ) {
                                    $scope.DTResultQtnTag[ $scope.decisionTreeQuestion.Id ] = true;
                                    $scope.populateDefaultValuesForResultTemplate( $scope.decisionTreeQuestion );
                                    $scope.relatedDTClickButton = commonAppService.isHasNextQuestionEnable($scope.decisionTreeQuestion, $scope.questionNamewithQuestionTemplate);
                                }
                                $scope.initializeDTFiles($scope.decisionTreeQuestion);
                            }
                            else {

                                //Added on 14-06-2016 for Related Decision Tree chain functionality
                                $scope.saveChosenAnswerOptionInDecisionTreeQuestions(true,forWhichQuestion, 'SAVE');
                            }
                        }
                    }
                }
                $scope.previousQuestionFun = function(dtQues) {
                    commonAppService.hideDTMessage();
                    var errorFlag = commonAppService.validateDTvalues(true);
                    var decisionTree_QuestionName = dtQues.Name;
                    if ($scope.previousQuestion != null && $scope.previousQuestion[decisionTree_QuestionName] != null && errorFlag) {
                        $scope.decisionTreeQuestion = $scope.previousQuestion[decisionTree_QuestionName];
                        if (dtQues.ExAM__Question_Type__c != 'Result') {
                            for(eachObj in $scope.DecisionTreeResponseArr) {
                                if ($scope.DecisionTreeResponseArr.hasOwnProperty(eachObj)) {
                                    if ($scope.DecisionTreeResponseArr[eachObj]["recId"] == dtQues.Id) {
                                        $scope.DecisionTreeResponseArr[eachObj]["tag"] = false;
                                    }
                                }
                            }
                            if ($scope.dtResponseFile[dtQues.Id]) {
                                $scope.dtResponseFile[dtQues.Id][0]['tag'] = false;
                            }
                        }
                        else {
                            $scope.DTResultQtnTag[ dtQues.Id ] = false;
                        }
                    }
                }
                $scope.saveChosenAnswerOptionInDecisionTreeQuestions = function(isNextbutton, resultQuestion, isSubmit) {
                    $('.imgDTStyle').removeClass('imgBorder');
                    $('.DecisionTree').addClass('slds-modal__close');
                    $('.DecisionTree').removeClass('slds-fade-in-open');
                    $('.resultPhotoUpload').css('display','none');
                    var saveFile = commonAppService.isFileSave({}, $scope.dtResponseFile, true);
                    commonAppService.saveDecisionTreeAnswersInBackEnd($scope.DecisionTreeResponseArr, $scope.DTResultResponse, $scope.response, $scope.DTResultQtnTag, $scope.currentASMIdStr, $scope.createdAnswerRecordIdForResultTemplate, $scope.sectionAndQuestionTemplateObj, $scope.decisionTreeLaunchedQuestion,$scope.decisionTreeLaunchedQuestionRes,$scope.contextQuesAndAnsField,$scope.quesIdANDAnsId, isNextbutton, $scope.viewerName, $scope.assessableObjId, $scope.assessbleObjAPI,$scope.currentASMAssesssmentTemplateTdStr, $scope.skipDTpath, $scope.quesIdAndResponseCount, saveFile).then(function(answerData) {
    
                        $scope.sectionAndQuestionTemplateObj = answerData.sectionAndQuestionTemplateObj;
                        $scope.quesIdAndResponseCount = answerData.quesIdAndResponseCount;
                        $scope.response = answerData.response;
                        $scope.currentASMIdStr = answerData.amId;
                        $scope.assessableObjId = answerData.assessableObjectId;
                        if(Object.keys($scope.decisionTreeLaunchedQuestion).length > 0 && angular.isDefined(answerData.quesIdwithAnsIdMap[Object.keys($scope.decisionTreeLaunchedQuestion)[0]])) {
                            $scope.quesIdANDAnsId[Object.keys($scope.decisionTreeLaunchedQuestion)[0]] = answerData.quesIdwithAnsIdMap[Object.keys($scope.decisionTreeLaunchedQuestion)[0]];
                        }
                        /**
                            Below if codn added on 28-07-2017
                            i) to maintain launched question id throughout Related Decision tree chain
                               until final submit
                            ii)not to set launched question id again after the first result question submit
                        **/
                        if (isSubmit != 'SAVE AND CONTINUE') {
                            $scope.decisionTreeLaunchedQuestion = {};
                            $scope.isCalledFirstTime = false;
                        }
                        $scope.DTselOptionIndex = {};
                        $scope.previousQuestion = {};
                        //call att upload method
                        commonAppService.callAttachmentUploadMethod(answerData, $scope.quesIdAndAnsAttId, {}, $scope.fileAttach, $scope.dtSignImage, $scope.photos, $scope.deleteAttFile,{},$scope.dtResponseFile).then(function(fileUploadResponse) {
                            $('.spinner, .slds-spinner--small').hide();
                            $scope.DecisionTreeresponse = {};
                            $scope.DTResultResponse = {};
                            $scope.DTResultQtnTag = {};
                            $scope.DecisionTreeResponseArr = [];
                            $scope.photo = {};
                            $scope.photos = {};
                            $scope.dtResponseFile = {};
                            $scope.dtSignImage = {};
                            $scope.decisionTreeQuesIdwithAnswerIdObj = _.extend($scope.decisionTreeQuesIdwithAnswerIdObj, answerData.quesIdwithAnsIdMap);
                            //Added on 14-06-2016 for Related Decision Tree chain functionality
                            if ( isSubmit == 'SAVE AND CONTINUE'
                                 &&( (resultQuestion.ExAM__Single_Next_Question__c != null && angular.isDefined(resultQuestion.ExAM__Single_Next_Question__r) ) || 
                                     (angular.isDefined(resultQuestion.ExAM__Next_Question__c) || 
                                     (angular.isDefined(resultQuestion.ExAM__Answer_Options__r)
                                       && resultQuestion.ExAM__Answer_Options__r.records.length > 0 
                                       && resultQuestion.ExAM__Answer_Options__r.records[0].ExAM__Next_Question__c != null)))
                                  && angular.isDefined(answerData.quesIdwithAnsIdMap[resultQuestion.Id])
                                ) {
                                $scope.createdAnswerRecordIdForResultTemplate = answerData.quesIdwithAnsIdMap[resultQuestion.Id];
                                //$scope.DTphoto(resultQuestion.Id,0);
                                $scope.openDecisionTreePopUp($scope.createdAnswerRecordIdForResultTemplate, resultQuestion);
                            }
                            else {
                                $scope.createdAnswerRecordIdForResultTemplate = '';
                            }
                        },
                        function(fileUploadError) {
                            console.log(fileUploadError);
                        });
                    },
                    function(answererror) {
                        $scope.showMessage = true;
                        $(window).scrollTop(0);
                        $scope.messageText = answererror;                            
                    });
                }
                $scope.populateDefaultValuesForResultTemplate = function(resultTemplate) {

                    /**
                        Below line added on 24-08-2016 to set question template id for DecisionTreeresponse
                        if there is no value given for any of the visible fields in Result Question
                    **/
                    if (angular.isDefined($scope.resultQuestionIdDefaultVal[resultTemplate.Id]) && 
                        angular.isDefined($scope.decisionTreeResultTemplate) && $scope.decisionTreeResultTemplate.length > 0 ) {
                        angular.forEach($scope.decisionTreeResultTemplate, function(value, key) {
        
                            if ( $scope.DTResultResponse[resultTemplate.Id+'~~'+value.fieldAPIName] == '' || 
                                 $scope.DTResultResponse[resultTemplate.Id+'~~'+value.fieldAPIName] == null || 
                                 $scope.DTResultResponse[resultTemplate.Id+'~~'+value.fieldAPIName] == undefined
                            ) {
                                if(value.fieldLabelName.toLowerCase() == 'picture') {
                                    $scope.DTphoto(resultTemplate.Id,0);
                                }
                                var defaultValueSelected = $scope.resultQuestionIdDefaultVal[resultTemplate.Id][value.fieldAPIName];
                                if (value.picklistValues != null) {
                                    var pklstValusesArray = [];
                                    $.each(value.picklistValues, function(key, value) {
                                        pklstValusesArray.push( value.toLowerCase() );
                                    });
                                    if (defaultValueSelected != null && defaultValueSelected != '' && defaultValueSelected != undefined) {
                                        defaultValueSelected = defaultValueSelected.toLowerCase();
                                        if (pklstValusesArray.indexOf(defaultValueSelected) != -1) {
                                            var valIndex = pklstValusesArray.indexOf(defaultValueSelected);
                                            defaultValueSelected = value.picklistValues[ valIndex ];
                                        }
                                    }
                                }
                                $scope.DTResultResponse[resultTemplate.Id+'~~'+value.fieldAPIName] = defaultValueSelected;
                                
                            }
                        });
                    }
                    if( $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] == '' ||
                        $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] == null ||
                        $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] == undefined ) {
                        if (angular.isUndefined(resultTemplate.ExAM__Answer_Options__r) && resultTemplate.ExAM__Subquestion_Label__c != null && resultTemplate.ExAM__Subquestion_Label__c != '') {
                            $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] = resultTemplate.ExAM__Subquestion_Label__c;
                        } else {
                            if(angular.isDefined(resultTemplate.ExAM__Answer_Options__r)) {
                                if( angular.isDefined(resultTemplate.ExAM__Answer_Options__r.records[0].Name) ){
                                    $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] = resultTemplate.ExAM__Answer_Options__r.records[0].Name;
                                }
                            } else {
                                $scope.DTResultResponse[resultTemplate.Id+'~~'+'exam__response__c'] = '';
                            }
                        }
                    }
                }
                
                /** End Decision Tree Functionality Related Method Invocation **/
                $scope.returnRelatedDependentQuestion = function(forWhichQuestion, selectedAnswer) {
                    
                    var availableAnswerOptions = [];
                    var availableDependentQuestionsOptions = [];
                    var answerPosition = -1;
                    
                    availableAnswerOptions = commonAppService.splitAvailableAnswerOptions(forWhichQuestion);
                    
                    if(availableAnswerOptions.length > 0) {
                        for (var i=0; i < availableAnswerOptions.length; i++) {
                            if (selectedAnswer == availableAnswerOptions[i]) {
                                answerPosition = i;
                                break;
                            }
                        }
                    }
                    
                    if( angular.isDefined($scope.nextDependentQuestion[forWhichQuestion.Id]) && angular.isDefined($scope.nextDependentQuestion[forWhichQuestion.Id].Id) ){
                        if( angular.isDefined($scope.response[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) ) {
                            delete $scope.response[$scope.nextDependentQuestion[forWhichQuestion.Id].Id];
                        }
                        if( angular.isDefined($scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) &&
                            angular.isDefined($scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id][0].resultbody) ){
                            delete $scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id];
                        } 
                        if( angular.isDefined($scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) && 
                            angular.isDefined($scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id][0].resultbody) ){
                            delete $scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id];
                        }
                        if( angular.isDefined($scope.selectedImage[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) ){
                            delete $scope.selectedImage[$scope.nextDependentQuestion[forWhichQuestion.Id].Id];
                        }
                        if( angular.isDefined($scope.selOptionIndex[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) ){
                            delete $scope.selOptionIndex[$scope.nextDependentQuestion[forWhichQuestion.Id].Id];
                        }
                        delete $scope.nextDependentQuestion[forWhichQuestion.Id];
                    }
                    if ( (angular.isDefined(forWhichQuestion.ExAM__Dependent_Question__c) && angular.isUndefined(forWhichQuestion.ExAM__Next_Question__c) && angular.isUndefined(forWhichQuestion.ExAM__Single_Next_Question__c))  || angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r) ) {
                        
                        if ( angular.isDefined(forWhichQuestion.ExAM__Dependent_Question__c) && angular.isUndefined(forWhichQuestion.ExAM__Answer_Options__r) ){
                            if (forWhichQuestion.ExAM__Dependent_Question__c.indexOf('~') > 0) {
                                availableDependentQuestionsOptions = commonAppService.trimFunc(forWhichQuestion.ExAM__Dependent_Question__c.split('~'));
                            }
                            else {
                                var temp = [];
                                temp.push(forWhichQuestion.ExAM__Dependent_Question__c );
                                var returnStr = commonAppService.trimFunc(temp);
                                availableDependentQuestionsOptions.push(temp);
                            }
                        } else {
                            if ( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records) ){
                                var depQuesOptLen = forWhichQuestion.ExAM__Answer_Options__r.records.length;
                                for( var i = 0; i < depQuesOptLen; i++ ){
                                    if( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r) &&
                                        angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r.Name) ){
                                        availableDependentQuestionsOptions[i] = forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Dependent_Question__r.Name;
                                    } else {
                                        availableDependentQuestionsOptions[i] = 'Nil';
                                    }
                                }
                            }
                            availableDependentQuestionsOptions = commonAppService.trimFunc(availableDependentQuestionsOptions);
                        }
                        if( availableDependentQuestionsOptions.length > 0 ) {
                            for(var j = 0; j < availableDependentQuestionsOptions.length; j++) {
                                var quesRec = {};
                                if(availableDependentQuestionsOptions[j] != 'Nil' && angular.isDefined($scope.dependentQuestionsObj[availableDependentQuestionsOptions[j]]) ) {
                                    quesRec = $scope.dependentQuestionsObj[availableDependentQuestionsOptions[j]].Id;
                                    if( angular.isDefined($scope.response[quesRec]) ){
                                        delete $scope.response[quesRec];
                                    }
                                }
                            }
                        }
                        if (availableDependentQuestionsOptions.length > answerPosition &&
                            angular.isDefined( availableDependentQuestionsOptions[answerPosition] ) &&
                            angular.isDefined( $scope.dependentQuestionsObj[ availableDependentQuestionsOptions[answerPosition]] )
                        ) {
    
                            $('.SecondaryQtnLabelDiv').css('display','block');
                            $scope.nextDependentQuestion[ forWhichQuestion.Id ] = $scope.dependentQuestionsObj[availableDependentQuestionsOptions[answerPosition]];
                        }
                        else if (availableDependentQuestionsOptions.length == 1 &&
                                 angular.isDefined( availableDependentQuestionsOptions[0] ) &&
                                 angular.isDefined( $scope.dependentQuestionsObj[ availableDependentQuestionsOptions[0]] )
                        ) {
                        
                            $('.SecondaryQtnLabelDiv').css('display','block');
                            $scope.nextDependentQuestion[ forWhichQuestion.Id ] = $scope.dependentQuestionsObj[availableDependentQuestionsOptions[0]];
                        } else {
                        
                            $('.SecondaryQtnLabelDiv').css('display','none');
                            $scope.nextDependentQuestion[ forWhichQuestion.Id ] = undefined;
                        }
                    }
                    if( angular.isDefined($scope.nextDependentQuestion[forWhichQuestion.Id]) 
                        && ($scope.nextDependentQuestion[forWhichQuestion.Id].ExAM__Question_Type__c == 'File Question - AM' || 
                            $scope.nextDependentQuestion[forWhichQuestion.Id].ExAM__Question_Type__c == 'File Question - Assessable Object' || 
                            $scope.nextDependentQuestion[forWhichQuestion.Id].ExAM__Question_Type__c == 'File Question - Answer' ) ) {
                        if( angular.isUndefined($scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) ){
                            $scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id] = [];
                            $scope.responseFile[$scope.nextDependentQuestion[forWhichQuestion.Id].Id].push({name:'No file chosen',quesName:$scope.nextDependentQuestion[forWhichQuestion.Id].Name,quesType:$scope.nextDependentQuestion[forWhichQuestion.Id].ExAM__Question_Type__c});
                        } 
                        if( angular.isUndefined($scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id]) ){
                            $scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id] = [];
                            $scope.fileAttach[$scope.nextDependentQuestion[forWhichQuestion.Id].Id].push({name:'No file chosen'});
                        }
                    }
                    $('.dependent'+forWhichQuestion.Id).removeClass('slds-has-error');
                    $('.dependentReq'+forWhichQuestion.Id).css('display','none');
                    return $scope.nextDependentQuestion;
                }
                $scope.resetChosenAnswerForThisQuestionTemplate = function(selQuestionId,type) {
                    
                    if (angular.isDefined($scope.response[selQuestionId]) && type != '' && type == 'ListQType') {
                        $('#listQT'+selQuestionId).removeClass('slds-is-selected');
                        delete $scope.response[selQuestionId];
                    } else {
                        delete $scope.response[selQuestionId];
                        delete $scope.selOptionIndex[selQuestionId];
                        if( angular.isDefined($scope.nextDependentQuestion[selQuestionId]) && angular.isDefined($scope.nextDependentQuestion[selQuestionId].Id) ){
                            delete $scope.response[$scope.nextDependentQuestion[selQuestionId].Id];
                            delete $scope.selectedImage[$scope.nextDependentQuestion[selQuestionId].Id];
                            delete $scope.selOptionIndex[$scope.nextDependentQuestion[selQuestionId].Id];
                            delete $scope.responseFile[$scope.nextDependentQuestion[selQuestionId].Id];
                            delete $scope.fileAttach[$scope.nextDependentQuestion[selQuestionId].Id];
                        }
                    }
                    if(angular.isDefined($scope.nextDependentQuestion[selQuestionId])){
                        delete $scope.nextDependentQuestion[selQuestionId];
                    }
                }
                $scope.openAssignmentManagerRecord = function() {
    
                    window.location.href = '/'+$scope.currentASMIdStr;
                }
                $scope.opencomment = function(selQuestionId) {
                    $scope.selecteQuestionId = selQuestionId;
                    $('.answercomment').removeClass('slds-modal__close');
                    $('.answercomment').addClass('slds-fade-in-open');
                }
                $scope.closecomment = function() {
                    $('.answercomment').addClass('slds-modal__close');
                    $('.answercomment').removeClass('slds-fade-in-open');
                }
                $scope.savecomment = function() {    
                    $('.answercomment').addClass('slds-modal__close');
                    $('.answercomment').removeClass('slds-fade-in-open');
                }
                
                $scope.openPhotoUpload = function(selQuestionId) {
                    document.getElementById('fid').value = '';
                    $scope.photoQuestionId = selQuestionId;
                    $('.photoUpload').removeClass('slds-modal__close');
                    $('.photoUpload').addClass('slds-fade-in-open');
                }
                $scope.closePhotoUpload = function() {
                    $('.photoUpload').addClass('slds-modal__close');
                    $('.photoUpload').removeClass('slds-fade-in-open');
                }
                $scope.savePhoto = function() {    
                    $('.photoUpload').addClass('slds-modal__close');
                    $('.photoUpload').removeClass('slds-fade-in-open');
                }
                <!--add on 15-09-2016-->
                $scope.openSignatureModal = function(quesRec) {
                    $scope.chooseQuesId = quesRec.Id;
                    var optArr = [];
                    var option = '';
                    optArr = commonAppService.splitAvailableAnswerOptions(quesRec);
                    
                    if(optArr.length > 0) {
                        option = optArr.join('~');
                    }
                    
                    if(option != ''){
                        $scope.signAnsOption = option;
                    } else {
                        $scope.signAnsOption = 'NoData';
                    }
                    $('.sign').removeClass('slds-modal__close');
                    $('.sign').addClass('slds-fade-in-open'); 
                    $timeout(function(){
                        var canvas = document.getElementById('canvas'+quesRec.Id);
                        var context = canvas.getContext('2d');
                        signature = new SignaturePad(canvas, {
                            backgroundColor: 'rgba(255, 255, 255, 0)',
                            penColor: 'rgb(0, 0, 0)'
                        });
                        if($scope.signImage[$scope.chooseQuesId]){
                            var imageObj = new Image();
                            imageObj.onload = function() {
                              context.drawImage(imageObj, 0, 0);
                            };
                            imageObj.src = $scope.signImage[$scope.chooseQuesId];
                        }else{
                            $scope.canvasClick = false;
                        }
                    },100);
                }
                $scope.openDtSignatureModal = function(quesRec) {
                    var optArr = [];
                    var option = '';
                    optArr = commonAppService.splitAvailableAnswerOptions(quesRec);
                    
                    if(optArr.length > 0) {
                        option = optArr.join('~');
                    }                    
                    if(option != ''){
                        $scope.DecisionTreeresponse[quesRec.Id] = option;
                    } else {
                        $scope.DecisionTreeresponse[quesRec.Id] = 'NoData';
                    }
                    $timeout(function(){
                        var canvas = document.getElementById('canvas'+quesRec.Id);
                        var context = canvas.getContext('2d');
                        $scope.canvasClick = false;
                        signature = new SignaturePad(canvas, {
                            backgroundColor: 'rgba(255, 255, 255, 0)',
                            penColor: 'rgb(0, 0, 0)'
                        });
                    },100);
                }
                $scope.closeSign = function() {
                     $scope.signAnsOption = null;
                     $scope.tempsignAnsOption = null;
                     $('.sign').addClass('slds-modal__close');
                     $('.sign').removeClass('slds-fade-in-open');
                }
                $scope.clearSign = function(){
                    signature.clear();
                    $scope.tempsignAnsOption = angular.copy($scope.signAnsOption);
                    $scope.signAnsOption = null;
                };
                $scope.canvasClickfun = function(){
                    $scope.canvasClick = true;
                    if($scope.tempsignAnsOption){
                        $scope.signAnsOption = $scope.tempsignAnsOption;
                    }
                }
                $scope.saveSign = function(){
                    if($scope.signAnsOption && $scope.canvasClick){
                        $scope.signImage[$scope.chooseQuesId] = signature.toDataURL('image/png');
                        if($scope.signAnsOption == 'NoData'){
                            $scope.response[$scope.chooseQuesId] = '';
                        }else{
                            $scope.response[$scope.chooseQuesId] = $scope.signAnsOption;
                        }
                        
                    }else {
                        delete $scope.signImage[$scope.chooseQuesId];
                        delete $scope.response[$scope.chooseQuesId];
                    }
                    signature.clear();
                    $('.sign').addClass('slds-modal__close');
                    $('.sign').removeClass('slds-fade-in-open');
                };
                $scope.imageTypeQues = function(usrSelectImageQuestion, usrSelectImage, $event, imgArr, id, isDtImage) {
                    var options = [];
                    $scope.selectedImage[usrSelectImageQuestion.Id] = true;
                    options = commonAppService.splitAvailableAnswerOptions(usrSelectImageQuestion);
                    
                    if(options.length > 0) {
                        var optionText = options[usrSelectImage]; 
                        if( isDtImage ) {
                            $scope.DecisionTreeresponse[usrSelectImageQuestion.Id] = optionText;
                            $scope.DTselOptionIndex[usrSelectImageQuestion.Id] = usrSelectImage;
                        }
                        else {
                            $scope.response[usrSelectImageQuestion.Id] = optionText;
                            $scope.selOptionIndex[usrSelectImageQuestion.Id] = usrSelectImage;
                        }
                    }               
                }
                
                $scope.setSelectedOption = function(forWhichQuestion, selOption, options, fromDecisionTree) {
                    var answerOption =  $scope.splitOptions(forWhichQuestion);
    
                    var isNext = false;
                    var questionPosition;
                    var nextquestionList = [];
                    $scope.DecisionTreeresponse[forWhichQuestion.Id] = selOption;
                    if( angular.isDefined(forWhichQuestion.ExAM__Single_Next_Question__c) && angular.isDefined(forWhichQuestion.ExAM__Single_Next_Question__r) ){
                        isNext = true;
                    } else {
                        if(answerOption.length > 0) {
                            for (var i=0; i < answerOption.length; i++) {
                                if (selOption == answerOption[i]) {
                                    questionPosition = i;
                                    break;
                                }
                            }
                        }   
                        if ( angular.isUndefined(forWhichQuestion.ExAM__Answer_Options__r) && angular.isDefined(forWhichQuestion.ExAM__Next_Question__c) && forWhichQuestion.ExAM__Next_Question__c != null ){
                            nextquestionList = commonAppService.trimFunc(forWhichQuestion.ExAM__Next_Question__c.split('~'));    
                        } else {
                            if ( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r) && angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records) ){
                                var nextQuesLen = forWhichQuestion.ExAM__Answer_Options__r.records.length;
                                for( var i = 0; i < nextQuesLen; i++ ){
                                    if( angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r) && 
                                        angular.isDefined(forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name) ){
                                        nextquestionList[i] = forWhichQuestion.ExAM__Answer_Options__r.records[i].ExAM__Next_Question__r.Name;
                                    } else {
                                        nextquestionList[i] = 'Nil';
                                    }
                                }
                                nextquestionList = commonAppService.trimFunc(nextquestionList);
                            }
                        }
                        if(nextquestionList.length > 0 && nextquestionList[questionPosition] != 'Nil') {
                            isNext = true;
                        }
                    }
                    if(fromDecisionTree) {
                        $scope.renderNextQuestionInDecisionTreeFunCall(selOption, forWhichQuestion);
                    } else if(isNext) {
                        $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                        $scope.response[forWhichQuestion.Id] = selOption;
                        $scope.openDecisionTreePopUp(selOption, forWhichQuestion);
                    } else {
                        $scope.isSelectBtnOptn[forWhichQuestion.Id] = true;
                        $scope.response[forWhichQuestion.Id] = selOption;
                    }
                }
                $scope.answerFile  = function(quesRec, isDT){
                    $scope.ansFileId = quesRec.Id;
                    var options = [];
                    options = commonAppService.splitAvailableAnswerOptions(quesRec);
                    if(options != null && options.length > 0) {
                        $scope.ansFileOption = options.join('~');
                    } 
                    if( quesRec.ExAM__Question_Type__c == 'File Question - Answer' && isDT ){
                        $scope.DecisionTreeresponse[$scope.ansFileId] = $scope.ansFileOption;
                    } else if( quesRec.ExAM__Question_Type__c == 'File Question - Answer' && !isDT ) {
                        $scope.response[$scope.ansFileId] = $scope.ansFileOption;
                    }
                }
                $scope.amFile  = function(quesRec, isDT){
                    if( angular.isDefined($scope.responseFile[quesRec.Id]) && angular.isDefined($scope.responseFile[quesRec.Id][0].id)) {
                        if(confirm("Are you sure?")) {
                            $scope.deleteAttFile.push($scope.responseFile[quesRec.Id][0].id);
                            delete $scope.responseFile[quesRec.Id];
                            if(angular.isUndefined($scope.responseFile[quesRec.Id])){
                                $scope.responseFile[quesRec.Id] = [];
                                $scope.responseFile[quesRec.Id].push({name:'No file chosen',quesName:quesRec.Name,quesType:quesRec.ExAM__Question_Type__c});
                            }
                            $('#imgdiv'+quesRec.Id).hide();
                            document.getElementById('fileAttId'+quesRec.Id).click();
                        }
                    } else if(angular.isUndefined($scope.dtResponseFile[quesRec.Id]) && isDT){
                        $scope.dtResponseFile[quesRec.Id] = [];
                        $scope.dtResponseFile[quesRec.Id].push({name:'No file chosen',quesName:quesRec.Name,quesType:quesRec.ExAM__Question_Type__c,tag:true});
                        document.getElementById('fileAttId'+quesRec.Id).click();
                    } else{
                        document.getElementById('fileAttId'+quesRec.Id).click();   
                    }                 
                }
                $scope.removeAttachment = function(ques,isDT) {
                    $('.fileSizeUpload'+ques.Id).css('display','none');
                    if( angular.isDefined($scope.responseFile[ques.Id]) && angular.isDefined($scope.responseFile[ques.Id][0].id)){
                        if(confirm("Are you sure?")) {
                            $scope.deleteAttFile.push($scope.responseFile[ques.Id][0].id);
                            $scope.responseFile[ques.Id] = [];
                            $scope.responseFile[ques.Id].push({name:'No file chosen',quesName:ques.Name,quesType:ques.ExAM__Question_Type__c});
                            $('#imgdiv'+ques.Id).hide();
                        }
                    } else if(angular.isDefined($scope.dtResponseFile[ques.Id]) && isDT){
                        $scope.dtResponseFile[ques.Id] = [];
                        $scope.dtResponseFile[ques.Id].push({name:'No file chosen',quesName:ques.Name,quesType:ques.ExAM__Question_Type__c,tag:true});
                    } else {
                        $scope.responseFile[ques.Id] = [];
                        $scope.responseFile[ques.Id].push({name:'No file chosen',quesName:ques.Name,quesType:ques.ExAM__Question_Type__c});
                    }
                }
                $scope.addFileAttchAM = function(ques){
                    if(angular.isDefined(ques.Id)){
                        if(angular.isUndefined($scope.responseFile[ques.Id])){
                            $scope.responseFile[ques.Id] = [];
                            $scope.responseFile[ques.Id].push({name:'No file chosen',quesName:ques.Name,quesType:ques.ExAM__Question_Type__c});
                        }
                    }
                }
                $scope.addDTFileAns = function(ques){
                    if(angular.isUndefined($scope.photos[ques.Id])){
                        $scope.photos[ques.Id] = [];
                        $scope.photos[ques.Id].push({name:'No file chosen'});
                    }
                }
                $scope.fileChanged = function(ele) {
                    var files = ele.files;
                    var l = files.length; 
                    var quesId = ele.id;
                    var index = 0;
                    if(quesId.includes('fileAttId')){
                        quesId = quesId.slice(9);
                        if(quesId.length >18){
                            index = quesId.slice(quesId.length-1,quesId.length);
                            quesId = quesId.slice(0,quesId.length-1);
                        }
                    }
                    $('.fileSizeUpload'+quesId).css('display','none');
                    if(angular.isDefined(files[0]) && files[0].size > 750000){
                        if(angular.isDefined($scope.fileAttach[quesId])){
                            $scope.fileAttach[quesId][index] = {name:'No file chosen'};
                        }
                        if($scope.fileAttach[quesId].length > 1){
                            $scope.fileAttach[quesId].splice(index,1);
                        }
                        var isDeletable = false;
                        var len = $scope.fileAttach[quesId].length;
                        for(i=0; i<len; i++){
                            if($scope.fileAttach[quesId][i].resultbody != undefined){
                                isDeletable = true;
                                break;
                            }
                        }
                        if(!isDeletable){
                            delete $scope.response[$scope.ansFileId];
                        }
                        $('.fileSizeUpload'+quesId).css('display','');
                    }
                    if(l > 0) {
                       $('.fileUpload'+$scope.ansFileId).css('display','none');
                    }
                }
                $scope.fileChangedAM = function(ele) {
                    var quesId = ele.id;
                    var index = 0; 
                    if(quesId.includes('fileAttId')){
                        quesId = quesId.slice(9);
                        if(quesId.length >18){
                            index = quesId.slice(quesId.length-1,quesId.length);
                            quesId = quesId.slice(0,quesId.length-1);
                        }
                    }
                    $('.fileSizeUpload'+quesId).css('display','none');
                    var files = ele.files;
                    var l = files.length; 
                    
                    if(angular.isDefined(files[0]) && files[0].size > 750000){
                        if(angular.isDefined($scope.responseFile[quesId])) {
                            $scope.responseFile[quesId] = [];
                            $scope.responseFile[quesId].push({name:'No file chosen',quesName:ele.name,quesType:ele.alt});
                        } else if(angular.isDefined($scope.dtResponseFile[quesId])){
                            $scope.dtResponseFile[quesId] = [];
                            $scope.dtResponseFile[quesId].push({name:'No file chosen',quesName:ele.name,quesType:ele.alt,tag:true});
                        }
                        $('.fileSizeUpload'+quesId).css('display','');
                    }
                    if(l > 0) {
                       $('.fileUpload'+quesId).css('display','none');
                    }
                }
                $scope.photoUploadChanged = function(ele) {
                    var files = ele.files;
                    var l = files.length; 
                    var photoId = (ele.id).replace('fileAttId','');
                    var index = photoId.slice(photoId.length-1,photoId.length);
                    photoId = photoId.substring(0, photoId.lastIndexOf('index'));
                    $('.resultPhotoSizeUpload'+photoId).css('display','none');
                    if( angular.isDefined(files[0]) && files[0].size > 750000){
                        $scope.photos[photoId][index] = {name:'No file chosen'};
                        var len = $scope.photos[photoId].length;
                        if(len > 1){
                            $scope.photos[photoId].splice(index,1);
                        }
                        var isDeletable = false;
                        for(i=0; i<len; i++){
                            if($scope.photos[photoId][i].resultbody != undefined){
                                isDeletable = true;
                                break;
                            }
                        }
                        if(!isDeletable){
                            delete $scope.DecisionTreeresponse[$scope.ansFileId];
                        }
                        $('.resultPhotoSizeUpload'+photoId).css('display','');
                    }
                    if(l > 0) {
                       $('.resultPhotoUpload'+photoId).css('display','none');
                    }
                }
                $scope.hotspotInit = function(hotspotProperties) {
                    if (hotspotProperties != null && hotspotProperties != '') {
                        return JSON.parse(_.unescape(hotspotProperties));
                    } else {
                        return null;
                    }
                }
                $scope.hilightinit = function () {
                    commonAppService.maphilightservice();                
                }
                $scope.ListQuestionType = function(option,quesId,isDtRes) {
                     if( isDtRes ){
                         $scope.DecisionTreeresponse[quesId] = option;
                     } else {
                         $scope.response[quesId] = option;
                     }
                     
                }
                $scope.splitImageOption = function(quesRec) {                   
                    $timeout(function() { 
                        var arr = [];
                        arr = commonAppService.splitAvailableAnswerOptions(quesRec);
                        if(arr != null && arr.length > 0) {
                            if($scope.response.hasOwnProperty(quesRec.Id)) {
                                $scope.selectedImage[quesRec.Id] = true;
                                for(var i=0;i<arr.length;i++) {
                                    if(arr[i] == $scope.response[quesRec.Id]) {
                                        $scope.selOptionIndex[quesRec.Id] = i;
                                    }
                                }
                            }
                        }
                    });     
                }      
                $scope.setDefaultBtn = function(id) {
                    if($scope.response.hasOwnProperty(id)) {
                        $scope.isSelectBtnOptn[id] = true;
                    }
                } 
                $scope.DTphoto = function(id,index) {
                    $('.resultPhotoUpload'+id).css('display','none');
                    $('.resultPhotoSizeUpload'+id).css('display','none');
                    var arrIndex = index.valueOf()-1 ;
                    var file = '';
                    if((arrIndex > 0 || arrIndex == 0) && angular.isDefined($scope.photos[id][arrIndex].resultbody) ){
                        file = $scope.photos[id][arrIndex].resultbody;
                    }
                    var isFileSizeLarge = commonAppService.fileSizeCalculator(file);
                    if(isFileSizeLarge){
                        $('.resultPhotoSizeUpload'+id).css('display','');
                    } else {
                        if( index == 0) {
                            if(angular.isUndefined($scope.photos[id])) {
                                $scope.photos[id] = [];
                            }
                            if(angular.isUndefined($scope.photos[id][index])) {
                                $scope.photos[id][index] = {name:'No file chosen'};
                            }
                        } else if($scope.photos[id][arrIndex] == null || (angular.isUndefined($scope.photos[id][arrIndex].id) && angular.isUndefined($scope.photos[id][arrIndex].resultbody))) {
                            $('.resultPhotoUpload'+id).css('display','');
                        } else if($scope.photos[id][arrIndex] && (angular.isDefined($scope.photos[id][arrIndex].id) || angular.isDefined($scope.photos[id][arrIndex].resultbody))) {
                            if(angular.isUndefined($scope.photos[id])) {
                                $scope.photos[id] = [];
                            }
                            $scope.photos[id][index] = {name:'No file chosen'};
                        }
                    }
                }
                $scope.removePhotos = function(id,index) {
                    $('.resultPhotoUpload'+id).css('display','none');
                    $('.resultPhotoSizeUpload'+id).css('display','none');
                    if(index == 0 && $scope.photos[id].length == 1) {
                        $scope.photos[id][index] = {name:'No file chosen'};
                        if(angular.isDefined($scope.DecisionTreeresponse[id])){
                            delete $scope.DecisionTreeresponse[id];
                        }
                    } else if((index == 0 && $scope.photos[id].length > 1) || (index !=0)) {
                        $scope.photos[id].splice(index,1);
                       
                        var lastIndex = $scope.photos[id].length-1;
                        var file = '';
                        if( angular.isDefined($scope.photos[id][lastIndex].resultbody) ){
                            file = $scope.photos[id][lastIndex].resultbody;
                        }
                        var isFileSizeLarge = commonAppService.fileSizeCalculator(file);
                        if(isFileSizeLarge){
                            $('.resultPhotoSizeUpload'+id).css('display','');
                        } 
                    } 
                }
                
                $scope.addFileQuestionAttachFun = function(id,index) {
                    $('.fileUpload'+id).css('display','none');
                    $('.fileSizeUpload'+id).css('display','none');
                    var arrIndex = index.valueOf()-1 ;
                    var file = '';
                    if((arrIndex > 0 || arrIndex == 0) && angular.isDefined($scope.fileAttach[id][arrIndex].resultbody) ){
                        file = $scope.fileAttach[id][arrIndex].resultbody;
                    }
                    var isFileSizeLarge = commonAppService.fileSizeCalculator(file);
                    if(isFileSizeLarge){
                        $('.fileSizeUpload'+id).css('display','');
                    } else {
                        if( index == 0) {
                            if(angular.isUndefined($scope.fileAttach[id])) {
                                $scope.fileAttach[id] = [];
                            }
                            if(angular.isUndefined($scope.fileAttach[id][index])) {
                                $scope.fileAttach[id][index] = {name:'No file chosen'};
                            }
                        } else if($scope.fileAttach[id][arrIndex] == null || (angular.isUndefined($scope.fileAttach[id][arrIndex].id) && angular.isUndefined($scope.fileAttach[id][arrIndex].resultbody))) {
                            
                            $('.fileUpload'+id).css('display','');
                        } else if($scope.fileAttach[id][arrIndex] && (angular.isDefined($scope.fileAttach[id][arrIndex].id) || angular.isDefined($scope.fileAttach[id][arrIndex].resultbody))) {
                            if(angular.isUndefined($scope.fileAttach[id])) {
                                $scope.fileAttach[id] = [];
                            }
                            $scope.fileAttach[id][index] = {name:'No file chosen'};
                        }
                    }
                }
                
                $scope.removeFileQuestionAttachFun = function(id,index) {
                    $('.fileUpload'+id).css('display','none');
                    $('.fileSizeUpload'+id).css('display','none');
                    var remove = true;
                    if(angular.isDefined($scope.fileAttach[id][index].id)) {
                        if(confirm("Are you sure?")) {
                            $scope.deleteAttFile.push($scope.fileAttach[id][index].id);
                        } else {
                            remove = false;
                        }
                    }
                    if(remove){
                        if(index == 0 && $scope.fileAttach[id].length == 1) {
                            $scope.fileAttach[id][index] = {name:'No file chosen'};
                            delete $scope.response[id];
                        } else if((index == 0 && $scope.fileAttach[id].length > 1) || (index !=0)) {
                            $scope.fileAttach[id].splice(index,1);
                            var lastIndex = $scope.fileAttach[id].length-1;
                            var file = '';
                            if( angular.isDefined($scope.fileAttach[id][lastIndex].resultbody) ){
                                file = $scope.fileAttach[id][lastIndex].resultbody;
                            }
                            var isFileSizeLarge = commonAppService.fileSizeCalculator(file);
                            if(isFileSizeLarge){
                                $('.fileSizeUpload'+id).css('display','');
                            } 
                        } 
                    }
                }
                $scope.videoWatched = function(id,option) {
                    $scope.response[id] = option;
                }
                $scope.click = function(id,index) {
                    if(angular.isDefined($scope.fileAttach[id][index].id)) {
                        if(confirm("Are you sure?")) {
                            $scope.deleteAttFile.push($scope.fileAttach[id][index].id);
                            delete $scope.fileAttach[id][index].id;
                            document.getElementById('fileAttId'+id+index).click();
                        }
                    } else {
                        document.getElementById('fileAttId'+id+index).click();   
                    }
                };
                $scope.DTclick = function(id,index) {
                    document.getElementById('fileAttId'+id+'index'+index).click();
                };
                $scope.urlConverter = function(ques) {
                    var tempUrl = ques.ExAM__Video_URL__c;
                    if(tempUrl.indexOf("watch?v=") > 0){
                        tempUrl = tempUrl.replace('watch?v=','embed/');
                    }
                    $scope.trustedUrl[ques.Id] = $sce.trustAsResourceUrl(tempUrl);
                }
                $scope.isImageType = function(cType) {
                    return (cType != '' && cType != null && cType.startsWith("image/")) ? true : false;
                }
                $scope.$on('hideMessage',function(event,arg){
                    $scope.showMessage = false;
                    $scope.response = arg.response;
                });
                $scope.$on('updateCalledOnce',function(event,param) {
                    $scope.calledOnce = param.calledOnce;
                });
                $scope.hasCheckboxAnswered = function(qId) {
                    if(angular.isUndefined($scope.response[qId])) {
                        $scope.response[qId] = false
                    }
                }    
                $scope.openModalWindow = function() {
                    if ( ($scope.modalWindowTxt != '' && $scope.modalWindowTxt.length > 500 ) 
                        || ($scope.tqMessage != '' && $scope.tqMessage.length > 500) ) {
                        $('.ModalWindow').addClass('slds-fade-in-open slds-modal--large');
                    } else {
                        $('.ModalWindow').addClass('slds-fade-in-open');
                    }
                    $('.ModalWindow').removeClass('slds-modal__close');
                }
                $scope.closeModalWindow = function(isOK) {
                    if( isOK ) {
                        $scope.calledOnce = true;
                        $scope.saveUsrEnteredAnswerOptions(true);
                    } else {
                        $scope.calledOnce = false;
                    }
                    $('.ModalWindow').addClass('slds-modal__close');
                    $('.ModalWindow').removeClass('slds-fade-in-open');
                    
                } 
                
        });
    </script>
</apex:component>